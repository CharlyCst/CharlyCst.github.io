<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on CharlyCst</title>
        <link>https://charlycst.github.io/posts/</link>
        <description>Recent content in Posts on CharlyCst</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 29 May 2024 14:36:04 +0200</lastBuildDate>
        <atom:link href="https://charlycst.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Using the TLA⁺ Command Line Interface</title>
            <link>https://charlycst.github.io/posts/tla-cli/</link>
            <pubDate>Sun, 12 Sep 2021 10:41:19 +0200</pubDate>
            
            <guid>https://charlycst.github.io/posts/tla-cli/</guid>
            <description>TLA⁺ is a formal language for modelling concurrent and distributed systems in the form of a mathematical specification. TLA⁺ is often used with a set of tools, such as the TLC model checker, distributed with the official TLA⁺ IDE: the TLA⁺ toolbox.
The toolbox is fine, but I personally prefer to edit my specifications using my favorite editor rather than a specialized IDE. Turns out running the TLA⁺ tools from the command line is quite simple yet not very well documented, that&amp;rsquo;s why I decided to write down my process for using TLA⁺ outside of the toolbox, hope it helps!</description>
            <content type="html"><![CDATA[<p><a href="https://lamport.azurewebsites.net/tla/tla.html">TLA⁺</a> is a formal language for
modelling concurrent and distributed systems in the form of a mathematical
specification. TLA⁺ is often used with a set of tools, such as the TLC model
checker, distributed with the official TLA⁺ IDE: the <a href="https://lamport.azurewebsites.net/tla/toolbox.html">TLA⁺
toolbox</a>.</p>
<p>The toolbox is fine, but I personally prefer to edit my specifications using my
favorite editor rather than a specialized IDE. Turns out running the TLA⁺ tools
from the command line is quite simple yet not very well documented, that&rsquo;s why I
decided to write down my process for using TLA⁺ outside of the toolbox, hope it
helps!</p>
<h2 id="downloading-the-tools">Downloading the tools</h2>
<p>The tools are developed on Github and written in Java, each release consists in
a few assets such as OS specific versions of the toolbox but also contains a
standalone version of the tools in the form of the <code>tla2tools.jar</code> file. To
download the tools simply grab the last <code>tla2tools.jar</code> on the <a href="https://github.com/tlaplus/tlaplus/releases">release
page</a>. At the time of writing, the
latest stable release is 1.7.1 and it can be downloaded with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://github.com/tlaplus/tlaplus/releases/download/v1.7.1/tla2tools.jar
</span></span></code></pre></div><p>Next, you need a version of Java on your system, I&rsquo;m using java 11 and it works
just fine. You can check your Java installation with <code>java --version</code>. Then
running the tools is pretty simple:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>java -cp tla2tools.jar tlc2.TLC
</span></span></code></pre></div><p>This should raise an error (<code>Missing input TLA+ module</code>) but you should also get
the version of TLC (<code>TLC2 Version 2.16</code> in my case) so it&rsquo;s a good sign that the
installation is working.</p>
<h2 id="using-convenient-wrappers">Using convenient wrappers</h2>
<p>For ease of use, I use small bash wrappers around the tools so that I can call
<code>tlc</code> directly from command line. You can copy the following scripts and put
them somewhere in your <code>$PATH</code> to do the same.</p>

<div class="notices note" ><p>Don&rsquo;t forget to replace <code>&lt;/path/to/tla2tools.jar&gt;</code> by the real path of
<code>tla2tools.jar</code>!</p>
</div>

<p>Here are the tools:</p>
<h3 id="tlc">TLC</h3>
<p>Used to check models. See the TLC section for an example of usage.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>java -cp &lt;/path/to/tla2tools.jar&gt; tlc2.TLC $@
</span></span></code></pre></div><h3 id="tlatotex">TLAToTeX</h3>
<p>Produces a <code>.tex</code> file from a TLA⁺ specification that can in turn be used to
produce a PDF.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>java -cp &lt;/path/to/tla2tools.jar&gt; tla2tex.TLA $@
</span></span></code></pre></div><h3 id="textotla">TeXToTLA</h3>
<p>Given a <code>.tex</code> file containing some TLA⁺ in a <code>tla</code> environment, produces a new
<code>.tex</code> file with code for rendering the specification. Rendering the final
<code>.tex</code> requires having
<a href="https://lamport.azurewebsites.net/tla/tlatex.sty"><code>tlatex.sty</code></a> in scope.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>java -cp &lt;/path/to/tla2tools.jar&gt; tla2tex.TeX $@
</span></span></code></pre></div><h3 id="sany">SANY</h3>
<p>A TLA⁺ parser that can report syntax errors in a spec.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>java -cp &lt;/path/to/tla2tools.jar&gt; tla2sany.SANY $@
</span></span></code></pre></div><h2 id="the-tlc-model-checker">The TLC model checker</h2>
<p>Working with TLC from the command line requires to create a few additional files
that the toolbox usually generates automatically. Imagine you wan to specify a
two bits clock, dump the following spec in a <code>Clock.tla</code> file (the name is
important, TLC will complain otherwise):</p>
<pre tabindex="0"><code class="language-TLA" data-lang="TLA">---------------------- MODULE Clock ----------------------

CONSTANT InitialValue

VARIABLE clock

Init == clock = InitialValue
Tick == IF clock = 0 THEN clock&#39; = 1 ELSE clock&#39; = 0

IsValid == clock \in {0, 1}
Spec    == Init /\ [][Tick]_&lt;&lt;clock&gt;&gt;

==========================================================
</code></pre><p>So nothing too fancy here, we describe a clock that can take two values: 0
and 1. When doing model checking, we want to give a concrete value to the
<code>InitialValue</code> constant, we also want to tell TLC to check some properties such
as <code>IsValid</code>.</p>
<p>To do that we need another module, dump the following specification in a
<code>ClockModel.tla</code> file:</p>
<pre tabindex="0"><code class="language-TLA" data-lang="TLA">------------------- MODULE ClockModel --------------------

EXTENDS Clock

InputInitialValue == 0
PropertyIsValid   == []IsValid

==========================================================
</code></pre><p>This module extends the clock specification <code>Clock</code> (file name are important for
this to work!) and defines two predicate. I like to prefix my predicate with
<code>Input</code> or <code>Property</code> depending on what they represent. Here we defined an
initial value and a temporal property.</p>
<p>Then we need to tell TLC what are the inputs, properties and specifications to
check, this is done using a last file <code>ClockModel.cfg</code> (once again, the name is
important, it must be the same as the model filename with the <code>.cfg</code> extension
instead of <code>.tla</code>).</p>
<p>Copy the following in <code>ClockModel.cfg</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CONSTANT InitialValue &lt;- InputInitialValue
</span></span><span style="display:flex;"><span>PROPERTY PropertyIsValid
</span></span><span style="display:flex;"><span>SPECIFICATION Spec
</span></span></code></pre></div><p>This file tells TLC that the <code>InitialValue</code> constant must take the value
<code>InputInitialValue</code> we defined in our model, that it has to check the
<code>PropertyIsValid</code> temporal property and that specification is defined by the
<code>Spec</code> predicate.</p>
<p>And that&rsquo;s it, now we can check our model using TLC:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>tlc ClockModel.tla
</span></span></code></pre></div><p>Which should return without error.</p>

<div class="notices info" ><p>If your model is expected to reach some terminal state, pass the <code>-deadlock</code>
flag to TLC so that deadlocks are no longer considered as bugs.</p>
</div>

<h2 id="conclusion">Conclusion</h2>
<p>I hope this was helpful, you can also find some documentation
<a href="https://lamport.azurewebsites.net/tla/toolbox.html">here</a> or with the <code>-help</code>
flag for most tools. Feel free to report issues or corrections
<a href="https://github.com/CharlyCst/CharlyCst.github.io">here</a> and enjoy writing TLA⁺
specs outside of the toolbox!</p>
]]></content>
        </item>
        
        <item>
            <title>Compiling Rust Just-In-Time, the easy way</title>
            <link>https://charlycst.github.io/posts/jit-ing-rust/</link>
            <pubDate>Sat, 27 Mar 2021 10:52:44 +0100</pubDate>
            
            <guid>https://charlycst.github.io/posts/jit-ing-rust/</guid>
            <description>I just learned about dlopen a few days ago while scrolling on Twitter, it&amp;rsquo;s a function for programmatically loading dynamic libraries and then calling into them or using exported symbols. I already knew it was possible before, but until then I didn&amp;rsquo;t know how exactly, but now that all this power is at my fingertips I started to think about all kind of crazy things I could do with that.</description>
            <content type="html"><![CDATA[<p>I just learned about <a href="https://linux.die.net/man/3/dlopen"><code>dlopen</code></a> a few days ago while scrolling on Twitter, it&rsquo;s a function for programmatically loading dynamic libraries and then calling into them or using exported symbols.
I already knew it was possible before, but until then I didn&rsquo;t know <em>how</em> exactly, but now that all this power is at my fingertips I started to think about all kind of crazy things I could do with that.</p>
<p>For instance, I can load libraries at runtime, but nothing prevent me from also building them at runtime with my compiler right? So what happens if I dynamically generate code, compile it, link it to my program and call into it? According to Wikipedia that&rsquo;s exactly what Just-In-Time (JIT) compilation is:</p>
<blockquote>
<p>In computing, just-in-time (JIT) compilation (also dynamic translation or run-time compilations) is a way of executing computer code that involves compilation during execution of a program – at run time – rather than before execution.</p>
<p>Wikipedia</p>
</blockquote>
<p>Granted, it&rsquo;s not the kind of JIT compilation people usually talk about, and the performances will probably be terrible, but hey let&rsquo;s do it anyway.</p>
<p>Get your linker ready, here we go!</p>
<h2 id="building-a-dynamic-library-in-rust">Building a dynamic library in Rust</h2>
<p>Let&rsquo;s start simple, we&rsquo;ll create a dynamic library with a <code>hello</code> function in a single <code>hello.rs</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[no_mangle]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hello</span>() {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Hello, world!&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here the <code>hello</code> function is marked as <em>extern</em>, this tell the compiler that we want to make this function available to other programs to use.</p>
<p>We will use <code>rustc</code> directly instead of cargo, this will make things easier later when compiling at runtime.
One of the arguments rustc accepts is the <em>crate type</em>, here we want a dynamic library:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rustc --crate-type<span style="color:#f92672">=</span>dylib hello.rs
</span></span></code></pre></div><p>This will create a <code>libhello.so</code> on Linux (or a <code>.ddl</code> on Windows and <code>.dylib</code> on MacOs, but to be honest I don&rsquo;t really know how these OSes handle dynamic libraries so what I will say here applies mostly to Linux).</p>

<div class="notices note" ><p>Libraries traditionally begin with the <em>lib</em> prefix and some tools expect it, so if you decide to rename your output with the <code>-o</code> flag be sure to use the <em>lib</em> prefix too.</p>
</div>

<p>To check that it worked let&rsquo;s look for the hello symbol with <a href="https://linux.die.net/man/1/nm">nm</a>: <code>nm -D libhello.so | grep hello</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0000000000063160 T hello
</span></span></code></pre></div><p>Yes, the symbol is here, and according to the doc &lsquo;T&rsquo; means that it lives in the text (code) section (so it actually points to instructions, great) and the uppercase means that the symbol is global (exported).</p>
<p>I didn&rsquo;t comment about the <code>#[no_mangle]</code> bit, it tells the compiler net to do funny stuff with the function name, without it I got something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0000000000064160 T _ZN4dlib5hello17h40cf6e2e0e47355eE
</span></span></code></pre></div><p>Much harder to remember&hellip; And I doubt there are any kinds of stability guarantee.</p>
<h2 id="linking-our-library">Linking our library</h2>
<p>Now it&rsquo;s time to load our library, we will create a cargo project, let&rsquo;s say &lsquo;rs-jit&rsquo;, and declare an extern function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// src/main.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">extern</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hello</span>();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Trying to load a library...&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> { 
</span></span><span style="display:flex;"><span>        hello();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Running this will panic, indeed we need to do something to tell the compiler about our library.</p>
<p>When doing this kind of stuff it&rsquo;s often a good idea to also build the library as a part of the cargo build process, we can create a <code>build.rs</code> at the root to tell cargo how to build our dependencies:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">// build.rs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">use</span> std::env;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::process::Command;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> out_dir <span style="color:#f92672">=</span> env::var(<span style="color:#e6db74">&#34;OUT_DIR&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Compile our dynamic library
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    Command::new(<span style="color:#e6db74">&#34;rustc&#34;</span>)
</span></span><span style="display:flex;"><span>        .args(<span style="color:#f92672">&amp;</span>[<span style="color:#e6db74">&#34;--crate-type=dylib&#34;</span>, <span style="color:#e6db74">&#34;dlib/hello.rs&#34;</span>, <span style="color:#e6db74">&#34;-o&#34;</span>])
</span></span><span style="display:flex;"><span>        .arg(<span style="color:#f92672">&amp;</span>format!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">/libhello.so&#34;</span>, out_dir))
</span></span><span style="display:flex;"><span>        .status()
</span></span><span style="display:flex;"><span>        .unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Linking directives
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    println!(<span style="color:#e6db74">&#34;cargo:rustc-link-search=</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>, out_dir);
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;cargo:rustc-link-lib=dylib=hello&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Re-run this script only when the library has changed
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    println!(<span style="color:#e6db74">&#34;cargo:rerun-if-changed=lib/hello.rs&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>
<div class="notices note" ><p>You can learn more about build scripts <a href="https://doc.rust-lang.org/cargo/reference/build-scripts.html">here</a> and <a href="https://doc.rust-lang.org/cargo/reference/build-script-examples.html">here</a>.</p>
</div>

<p>This script assumes that we put our <code>hello.rs</code> file in a <code>dlib</code> folder, and will call rustc to build the library as we did before. What is great with this approach is that we can ask Cargo to re-build the library when the source file change.</p>
<p>Notice that we told cargo about our <em>hello</em> library and where to find it (in <code>out_dir</code>, which is somewhere in the <code>target/</code> directory).</p>
<p>Let&rsquo;s run it with <code>cargo run</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Trying to load a library...
</span></span><span style="display:flex;"><span>Hello, world!
</span></span></code></pre></div><p>Great, it worked!</p>
<p>It is also possible to inspect the dependencies of an executable with the <code>ldd</code> command, for instance with <code>ldd target/debug/rs-jit | grep hello</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rs" data-lang="rs"><span style="display:flex;"><span>	libhello.so <span style="color:#f92672">=&gt;</span> not found
</span></span></code></pre></div><p>Ho wait, not found? But it worked right?</p>
<p>Yes, that is because we told cargo where was our library, he is then running our executable with an updated environment that contains the library. In fact if we run our executable directly it will crash:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>./target/debug/rs-jit: error while loading shared libraries: libhello.so: cannot open shared object file: No such file or directory
</span></span></code></pre></div><p>We can ask cargo to tell us what he is doing exactly with the <code>-vv</code> (very verbose) flag.</p>
<p>When running <code>cargo run -vv</code> an inspecting the output there are quite a lot of flags, but one in particular caught my attention: <code>-L /home/&lt;path-to-my-folder&gt;/rs-jit/target/debug/build/rs-jit-923fa3340f768e20/out</code></p>
<p>Usually, the <code>-L</code> flags is used to tell a compiler where to look for libraries, so I strongly suspect it points to the dynamic library in the cargo <code>target</code> folder. We can check that by running the executable in an environment with the <code>LD_LIBRARY_PATH</code> set to this value, it&rsquo;s a variable used by the linker to look for libraries:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>LD_LIBRARY_PATH<span style="color:#f92672">=</span>/home/&lt;path-to-my-folder&gt;/debug/build/rs-jit-923fa3340f768e20/out ./target/debug/rs-jit
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Trying to load a library...
</span></span><span style="display:flex;"><span>Hello, world!
</span></span></code></pre></div><p>And it works again!</p>
<h2 id="loading-libraries-at-runtime">Loading libraries at runtime</h2>
<p>Let&rsquo;s remove our <code>build.rs</code> and do the linking at runtime: translating the example of the <a href="https://linux.die.net/man/3/dlopen">manual</a> in rust is pretty straightforward if we don&rsquo;t mind doing things the C (unsafe) way.</p>
<p>Let&rsquo;s suppose we have a dynamic library <code>libhello.so</code> in the working directory, to call a function linked at runtime we need to:</p>
<ol>
<li>Load the library using <code>dlopen</code>.</li>
<li>Search for a symbol (the function) in the library with <code>dlsym</code>.</li>
<li>Close the library once we are done (with <code>dlclose</code>).</li>
</ol>
<p>The <code>libc</code> crate re-export all these functions, with their raw C interface, so it boils down to this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">use</span> libc::{c_void, dlclose, dlopen, dlsym, <span style="color:#66d9ef">RTLD_NOW</span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::ffi::CString;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    println!(<span style="color:#e6db74">&#34;Trying to load a library...&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Load the library
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> filename <span style="color:#f92672">=</span> CString::new(<span style="color:#e6db74">&#34;./libhello.so&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> handle <span style="color:#f92672">=</span> dlopen(filename.as_ptr(), <span style="color:#66d9ef">RTLD_NOW</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> handle.is_null() {
</span></span><span style="display:flex;"><span>            panic!(<span style="color:#e6db74">&#34;Failed to resolve dlopen&#34;</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Look for the function in the library
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> fun_name <span style="color:#f92672">=</span> CString::new(<span style="color:#e6db74">&#34;hello&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> fun <span style="color:#f92672">=</span> dlsym(handle, fun_name.as_ptr());
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> fun.is_null() {
</span></span><span style="display:flex;"><span>            panic!(<span style="color:#e6db74">&#34;Failed to resolve &#39;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;&#34;</span>, <span style="color:#f92672">&amp;</span>fun_name.to_str().unwrap());
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// dlsym returns a C &#39;void*&#39;, cast it to a function pointer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> fun <span style="color:#f92672">=</span> std::mem::transmute::<span style="color:#f92672">&lt;*</span><span style="color:#66d9ef">mut</span> c_void, <span style="color:#66d9ef">fn</span>()<span style="color:#f92672">&gt;</span>(fun);
</span></span><span style="display:flex;"><span>        fun();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Cleanup
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> ret <span style="color:#f92672">=</span> dlclose(handle);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ret <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>            panic!(<span style="color:#e6db74">&#34;Error while closing lib&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s run it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Trying to load a library...
</span></span><span style="display:flex;"><span>Hello, world!
</span></span></code></pre></div><p>Perfect!</p>
<h2 id="a-kind-of-jit-compiler">A (kind of) JIT compiler</h2>
<p>Now we can:</p>
<ol>
<li>Build a dynamic library from rust (as we did in <code>build.rs</code>).</li>
<li>Load a dynamic library at runtime and call into a function.</li>
</ol>
<p>Let&rsquo;s combine both and create a JIT compiler!</p>
<p>I propose to build a simple calculator: the user can give an expression with two variables <code>a</code> and <code>b</code> and a value for those, then the expression is compiled by creating a small rust program and calling rustc on it, finally we link the library and call the function with the given values.</p>
<p>First we can build a small JIT engine backed by a file: when asked to compile an expression we write down a simple rust function by formatting a template</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::fs::File;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::io::prelude::<span style="color:#f92672">*</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::io::SeekFrom;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::process::Command;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">SOURCE_PATH</span>: <span style="color:#66d9ef">&amp;</span>&#39;static <span style="color:#66d9ef">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/tmp/jit.rs&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">LIB_PATH</span>: <span style="color:#66d9ef">&amp;</span>&#39;static <span style="color:#66d9ef">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/tmp/librsjit.so&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">FUN_NAME</span>: <span style="color:#66d9ef">&amp;</span>&#39;static <span style="color:#66d9ef">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;calc&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">JitEngine</span> {
</span></span><span style="display:flex;"><span>    file: <span style="color:#a6e22e">File</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> JitEngine {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">new</span>() -&gt; <span style="color:#a6e22e">Self</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> file <span style="color:#f92672">=</span> File::create(<span style="color:#66d9ef">SOURCE_PATH</span>).expect(<span style="color:#e6db74">&#34;Could not create file&#34;</span>);
</span></span><span style="display:flex;"><span>        Self { file }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Compile and expression and return a wrapper around the linked function
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">compile</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self, expression: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>) -&gt; <span style="color:#a6e22e">Fun</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Reset the source file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        self.file.set_len(<span style="color:#ae81ff">0</span>).unwrap();
</span></span><span style="display:flex;"><span>        self.file.seek(SeekFrom::Start(<span style="color:#ae81ff">0</span>)).unwrap();
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Write the rust program
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        self.file
</span></span><span style="display:flex;"><span>            .write_all(
</span></span><span style="display:flex;"><span>                format!(
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    #[no_mangle]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    pub extern fn calc(a: i64, b: i64) -&gt; i64 </span><span style="color:#ae81ff">{{</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                        </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                    </span><span style="color:#ae81ff">}}</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>                    expression
</span></span><span style="display:flex;"><span>                )
</span></span><span style="display:flex;"><span>                .as_bytes(),
</span></span><span style="display:flex;"><span>            )
</span></span><span style="display:flex;"><span>            .unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Compile the sources
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        Command::new(<span style="color:#e6db74">&#34;rustc&#34;</span>)
</span></span><span style="display:flex;"><span>            .args(<span style="color:#f92672">&amp;</span>[<span style="color:#e6db74">&#34;--crate-type=dylib&#34;</span>, <span style="color:#66d9ef">SOURCE_PATH</span>, <span style="color:#e6db74">&#34;-o&#34;</span>])
</span></span><span style="display:flex;"><span>            .arg(<span style="color:#66d9ef">LIB_PATH</span>)
</span></span><span style="display:flex;"><span>            .status()
</span></span><span style="display:flex;"><span>            .unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Return a wrapper around the function
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">unsafe</span> { Fun::new(<span style="color:#66d9ef">LIB_PATH</span>, <span style="color:#66d9ef">FUN_NAME</span>) }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>
<div class="notices warning" ><p>This is obviously a disaster from a security point of view, we are basically giving the user the right to execute arbitrary code on our machine, please don&rsquo;t do that in real life :)</p>
</div>

<p>The <code>Fun</code> struct in the previous snippet is a small wrapper around <code>dlopen</code>, it loads the library, then the symbol and close the library on <code>Drop</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#e6db74">/// A function from a library dynamically linked.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"></span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Fun</span> {
</span></span><span style="display:flex;"><span>    fun: <span style="color:#a6e22e">fn</span>(a: <span style="color:#66d9ef">i64</span>, b: <span style="color:#66d9ef">i64</span>) -&gt; <span style="color:#66d9ef">i64</span>,
</span></span><span style="display:flex;"><span>    handle: <span style="color:#f92672">*</span><span style="color:#66d9ef">mut</span> c_void,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> Fun {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsafe</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">new</span>(lib_path: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>, fun_name: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>) -&gt; <span style="color:#a6e22e">Self</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Load the library
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> filename <span style="color:#f92672">=</span> CString::new(lib_path).unwrap();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> handle <span style="color:#f92672">=</span> dlopen(filename.as_ptr(), <span style="color:#66d9ef">RTLD_NOW</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> handle.is_null() {
</span></span><span style="display:flex;"><span>            panic!(<span style="color:#e6db74">&#34;Failed to resolve dlopen&#34;</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Look for the function in the library
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> fun_name <span style="color:#f92672">=</span> CString::new(fun_name).unwrap();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> fun <span style="color:#f92672">=</span> dlsym(handle, fun_name.as_ptr());
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> fun.is_null() {
</span></span><span style="display:flex;"><span>            panic!(<span style="color:#e6db74">&#34;Failed to resolve &#39;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;&#34;</span>, <span style="color:#f92672">&amp;</span>fun_name.to_str().unwrap());
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// dlsym returns a C &#39;void*&#39;, cast it to a function pointer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> fun <span style="color:#f92672">=</span> std::mem::transmute::<span style="color:#f92672">&lt;*</span><span style="color:#66d9ef">mut</span> c_void, <span style="color:#66d9ef">fn</span>(<span style="color:#66d9ef">i64</span>, <span style="color:#66d9ef">i64</span>) -&gt; <span style="color:#66d9ef">i64</span><span style="color:#f92672">&gt;</span>(fun);
</span></span><span style="display:flex;"><span>        Self { fun, handle }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">call</span>(<span style="color:#f92672">&amp;</span>self, a: <span style="color:#66d9ef">i64</span>, b: <span style="color:#66d9ef">i64</span>) -&gt; <span style="color:#66d9ef">i64</span> {
</span></span><span style="display:flex;"><span>        (self.fun)(a, b)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> Drop <span style="color:#66d9ef">for</span> Fun {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">drop</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">unsafe</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> ret <span style="color:#f92672">=</span> dlclose(self.handle);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> ret <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>                panic!(<span style="color:#e6db74">&#34;Error while closing lib&#34;</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And then we are good to go! Let&rsquo;s write a small program jitting some expressions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> jit <span style="color:#f92672">=</span> JitEngine::new();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">loop</span> {
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;Value for a:&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> a <span style="color:#f92672">=</span> read_value();
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;Value for b:&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> b <span style="color:#f92672">=</span> read_value();
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;Expression:&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> expression <span style="color:#f92672">=</span> read_expression();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> fun <span style="color:#f92672">=</span> jit.compile(<span style="color:#f92672">&amp;</span>expression);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> result <span style="color:#f92672">=</span> fun.call(a, b);
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, result);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You can find the full source code <a href="https://gist.github.com/CharlyCst/1ba59e09f7ff9f844a5e907746d0c52e">here</a>.</p>
<p>Let&rsquo;s compile and try it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Value for a:
</span></span><span style="display:flex;"><span>3
</span></span><span style="display:flex;"><span>Value for b:
</span></span><span style="display:flex;"><span>4
</span></span><span style="display:flex;"><span>Expression:
</span></span><span style="display:flex;"><span>a*b
</span></span><span style="display:flex;"><span>12
</span></span></code></pre></div><p>Yeah, it works! There is ~1s of latency for computing the result, due to the call to rustc, but we are not here for performances anyway ¯\_(ツ)_/¯</p>
<p>Hope you enjoyed this post, feel free to report any bug/error or post a comment on <a href="https://github.com/CharlyCst/CharlyCst.github.io/issues">github</a> or on the <a href="https://gist.github.com/CharlyCst/1ba59e09f7ff9f844a5e907746d0c52e">source code</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Building a Memory Allocator for WebAssembly</title>
            <link>https://charlycst.github.io/posts/wasm-memory-allocator/</link>
            <pubDate>Mon, 21 Dec 2020 10:03:08 +0100</pubDate>
            
            <guid>https://charlycst.github.io/posts/wasm-memory-allocator/</guid>
            <description>While waiting for the GC proposal, the only way to request memory in WebAssembly is to allocate it for ourselves from the linear memory. Memory allocation and management is a huge topic in computer science, but in this post we will focus on a simple design: the linked list allocators.
Building an efficient allocator is notoriously hard, as testifies the popular jemalloc which is famously known for its 30,000 lines of codes.</description>
            <content type="html"><![CDATA[<p>While waiting for the <a href="https://github.com/WebAssembly/gc/blob/master/proposals/gc/Overview.md">GC proposal</a>, the only way to request memory in WebAssembly is to allocate it for ourselves from the linear memory.
Memory allocation and management is a huge topic in computer science, but in this post we will focus on a simple design: the <em>linked list allocators</em>.</p>
<p>Building an efficient allocator is notoriously hard, as testifies the popular <a href="http://jemalloc.net/">jemalloc</a> which is famously known for its 30,000 lines of codes.</p>
<p>In the context of programming languages, the memory allocator is both heavily influenced by the language design  and influences the language itself:
the <a href="https://golang.org/src/runtime/malloc.go">Go allocator</a> has a huge focus on concurrency with thread local memory pools, while OCaml integers are only 63 bits longs because the lowest bit is used by the GC to differentiate integers from pointers (that is why there is an <a href="https://caml.inria.fr/pub/docs/manual-ocaml/libref/Int64.html">int64 module</a>).</p>
<p>As you will see, linked list allocators are slow, the <code>malloc</code> operation takes <em>O(n)</em> steps, but they are also very flexible and are often used as a basis upon which more sophisticated allocation methods can be built.</p>
<h2 id="a-list-of-blocks">A list of blocks</h2>
<p>Linked list allocators are conceptually simple:
they consist in a (linked) list of blocks, when an allocation of size <em>s</em> is requested the allocator iterates through the list, selects a block of size at least <em>s</em> and removes it from the list before returning a pointer to the first byte of that block.</p>
<p>A block usually consist of a header and a body that correspond to the available memory.
The header is used to store meta-data: the block size and sometimes a few flags, while the body contains the pointer to the next block if it&rsquo;s free and some user data otherwise.</p>

    <figure class="center" >
        <img src="/img/wasmMemoryAllocator/blocks.png"  alt="Blocks in memory"   class="rounded"/>

        
            <figcaption class="center" >Blocks with headers (h), next pointers (n) and bodies which may be actively in use or not.</figcaption>
        
    </figure>


<p>The allocator algorithm can be summarized in a few lines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">malloc</span>(size):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> block <span style="color:#f92672">in</span> block_list:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> block<span style="color:#f92672">.</span>size <span style="color:#f92672">&gt;=</span> size:
</span></span><span style="display:flex;"><span>            list<span style="color:#f92672">.</span>remove(block)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> block
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Out of memory&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">free</span>(block):
</span></span><span style="display:flex;"><span>    list<span style="color:#f92672">.</span>append(block)
</span></span></code></pre></div>
<div class="notices note" ><p>Such an allocator that return the first big enough block is said to use a <em>first fit</em> strategy, another common strategy is the <em>best fit</em>, where the smallest block that is big enough is returned.</p>
</div>

<p>There are a few subtleties, however.</p>
<p>The first one is that we may only have blocks that are too big, imagine having only 64 bytes blocks and being asked a block of size 8. To save memory the solution is simply to break the block in two such that one of these new blocks has a size of 8.</p>
<p>But this may leads to the opposite problem: what if now all our blocks are too small? We should be able to merge two contiguous blocks into a bigger one. This operation is called <a href="https://en.wikipedia.org/wiki/Coalescing_(computer_science)">block coalescing</a>.</p>

<div class="notices note" ><p>In some case we may not be able to coalesce blocks, imagine our memory consists of two blocks of size 64 separated by a small 4 bytes block: it is no longer possible to allocate a 100 bytes block even though there is technically enough memory, we said that the memory is <em>fragmented</em>.</p>
</div>

<p>The other subtlety is <em>alignment</em>. In Web assembly alignment has no effect on the semantic, meaning that it does not change the program behavior, but it may affect performances.</p>
<p>A 32 bits load is aligned if its address is a multiple of 32 bits (or 4 bytes), and as you expect a 64 bits load is aligned if its address is a multiple of 64 bits (or 8 bytes).</p>

    <figure class="center" >
        <img src="/img/wasmMemoryAllocator/memoryAlignment.png"  alt="Aligned and unaligned reads"   class="rounded"/>

        
            <figcaption class="center" >First and last blocks (in red) are not aligned, but the others (in green) are.</figcaption>
        
    </figure>


<p>To put it simply, the hardware is not not wired to read <em>unaligned</em> values, and thus we should strive to avoid unaligned loads as much as possible.</p>
<h2 id="the-allocator-design">The allocator design</h2>
<p>The design space is huge, choices had to be made and for this post I propose the following:</p>
<ul>
<li>First fit strategy.</li>
<li>Memory blocks are aligned to 8 bytes.</li>
<li>Doubly linked list.</li>
<li>Coalesce on free.</li>
</ul>
<p>In WebAssembly the largest load can fetch 64 bits (or 8 bytes) and thus an alignment of 8 bytes is safe for any purpose.</p>
<p>Ok, but why a doubly linked list? That&rsquo;s because we will need the two way linking to be able to free blocks in O(1) while coalescing at the same time.</p>
<p>When free is called, it will look at the two neighbouring blocks and merge any free block with the one that is being freed.
This may require to remove an arbitrary block from the linked list, that is why we need to have pointers in both direction: so that we can glue the two ends together when cutting the chain.</p>
<p>In fact you will see that we will also need footers, otherwise there is no way to check if the preceding block is free.</p>

    <figure class="center" >
        <img src="/img/wasmMemoryAllocator/fullBlocks.png"  alt="Blocks layout in memory"   class="rounded"/>

        
            <figcaption class="center" >Block layout with headers (h), next pointer (n), previous pointer (p) and footer (f).</figcaption>
        
    </figure>


<p>You may think that all of this makes a lot of wasted space, and it&rsquo;s true, but the thing with WebAssembly is that memory addresses are only 32 bits long, thus we only need 8 bytes of &ldquo;wasted&rdquo; space (4 bytes of header, 4 of footer) plus a minimum of 8 bytes reserved for the body of the blocks so that we can store two pointers inside.</p>

<div class="notices note" ><p>If you want to see different trade-offs, you can have a look at this <a href="https://os.phil-opp.com/allocator-designs/">excellent post</a> which discusses allocator design in the context of a kernel.</p>
</div>

<h2 id="hands-on-code">Hands on code</h2>
<p>Before diving into some code, we need to think a little bit about the initial state of the memory (the compiler might help us, or we may write a separate <code>init_malloc</code> function).</p>
<p>We will need a pointer to the first free block, which may be anywhere, escpecially if the <code>Data</code> section initializes some part of the memory.</p>
<p>We can store that pointer anywhere we like, as long as <code>malloc</code> can reach it.
A global variable can do the job, in this post I will store it at the very begining of the linear memory (at index 0).</p>
<p>Without further ado, let&rsquo;s write that <code>malloc</code> function:</p>

<div class="notices note" ><p>The language I&rsquo;m using here is called <a href="https://github.com/CharlyCst/zephyr">Zephyr</a>, it&rsquo;s a small language I created for learning purpose. It should be pretty straight forward to translate it to your favorite language.</p>
</div>

<pre tabindex="0"><code class="language-zph" data-lang="zph">fun malloc(size i32) i32 {
    let addr = read_i32(0) // Address of the first free block
    let target_size = get_real_block_size(size)
    while true {
        if addr == 0 {
            panic()        // Out of memory
        }
        if read_i32(addr) &gt;= target_size {
            let block_size = split_block(addr, target_size)
            remove_block(addr)
            let header = block_size | 0x80000000 // set allocated bit
            set_i32(addr, header)                // header
            set_i32(addr + block_size, header)   // footer
            return addr + 4
        }
        addr = read_i32(addr + 4)                // go to next block
    }
}
</code></pre><p>Let&rsquo;s recap what happens here:</p>
<p>First we read the memory at index 0, remember that its where we decided to store the pointer to the first block.</p>
<p>Then we compute the minimal size of the block, it&rsquo;s not equal to the size passed to <code>malloc</code> for two reasons:</p>
<ul>
<li>We have to store a few meta-data in that block, at least two pointers and a footer.</li>
<li>We have to carefully pick a size such that the next block has the right alignment.</li>
</ul>
<p>Let&rsquo;s postpone the choice of the size for now, the next thing to do is to iterate over the list of block until we find one that is big enough.</p>
<p>We have to talk a little bit about the header now, it&rsquo;s a 32 bit value in which we store two things:</p>
<ul>
<li>a flag (the 32nd bit) set to 1 if the block is allocated, 0 otherwise.</li>
<li>the size of the block in the remaining 31 lowest bits.</li>
</ul>

    <figure class="center" >
        <img src="/img/wasmMemoryAllocator/header.png"  alt="Header layout"   class="rounded"/>

        
            <figcaption class="center" >WebAssembly uses little endian, so the most significant bit is at the end of the word.</figcaption>
        
    </figure>


<p>This layout allows to directly read the size of free blocks with a memory load at the address of the header: that&rsquo;s exactly what we&rsquo;re doing to check if the block is big enough.</p>
<p>From here there are two possibilities:</p>
<ul>
<li>The block is too small, in which case we can get the next block by following the <code>next</code> pointer (that we can read at <code>header_address + 4</code>).</li>
<li>The block is bigger than our target size 🎉</li>
</ul>
<p>In the latter case, we can try to split the block in two, this avoid wasting too much memory by creating a new free block with the excess space.
Then we remove the block from the free list, compute the value new header (its size plus the 32nd bit set to 1) and set both the header and footer to that value and finally return the address to the free space (the first byte after the header).</p>
<p>As you see it&rsquo;s not that complicated, there are a few details to pay attention to, but the algorithm is relatively simple.
Let&rsquo;s move to free now, it&rsquo;s basically the reverse operation:</p>
<pre tabindex="0"><code class="language-zph" data-lang="zph">pub fun free(ptr i32) {
    // get back the address of the header
    let addr = ptr - 4
    // insert the block in the chain
    let old_root = read_i32(0)
    if old_root != 0 {
        set_i32(old_root + 8, addr)
    }
    set_i32(0, addr)
    set_i32(addr + 4, old_root)
    set_i32(addr + 8, 0)
    // mark the block as free
    let header = read_i32(addr) ^ 0x80000000 // unset allocated bit
    set_i32(addr, header)                    // header
    set_i32(addr + header, header)           // footer
    // coalesce block with neighbours, if possible
    try_coalesce(addr)
}
</code></pre><p>Nothing fancy here, we compute the address of the header (4 bytes before the pointer we gave back with <code>malloc</code>),
then we insert the block at the beginning of the free list using the fact that the next and previous pointers are respectively 4 and 8 bytes after the header.</p>
<p>To remove the &lsquo;allocated&rsquo; flag, we use a <em>xor</em> between the header and 0x80000000, which is a 1 followed by 31 zeroes: this will left the 31 lowest bits unchanged, but because the 32nd is set to 1 it will be reset to 0.</p>
<p>Finally comes the time to coalesce our blocks into bigger ones.</p>
<p>I don&rsquo;t want to throw too much code into your face, you can check it <a href="https://github.com/CharlyCst/zephyr/blob/58d09fe0da1970566dc4579b1a01f4a0ad97eb9e/lib/core/mem/malloc.zph#L162">here</a> if you want, so let&rsquo;s just talk about the main idea.</p>
<p>We can easily find the header of the next block because we know the size of our block, if it happens to be free (the &lsquo;allocated&rsquo; flag is set to 0) we can merge both blocks into a single one.</p>
<p>Remember that we also maintain a footer? Here comes its moment of glory: its sole purpose is to allow coalescing.
Because both the &lsquo;allocated&rsquo; flag and the size is encoded in the footer, we can (if the block is free) get the address of its header (using the size in the footer) and merge both blocks.</p>

    <figure class="center" >
        <img src="/img/wasmMemoryAllocator/fullBlocks.png"  alt="Blocks layout in memory"   class="rounded"/>

        
            <figcaption class="center" >When freeing the right block, we can use the left block&#39;s footer to check if it is free and get its size.</figcaption>
        
    </figure>


<p>Let&rsquo;s come back to the <code>get_real_block_size</code> function we used in <code>malloc</code>, the choice of the <em>real</em> size of the block is crucial for preserving the alignment:
imagine if the user asks for a block of 12 bytes, we break a block to create one of size 12 and another one with the space left, here is what happens:</p>

    <figure class="center" >
        <img src="/img/wasmMemoryAllocator/unalignedBody.png"  alt="Unaligned block bodies"   class="rounded"/>

        
            <figcaption class="center" >The second body does not have an alignment of 8.</figcaption>
        
    </figure>


<p>As you can see, the next block&rsquo;s body is only aligned to 4, we are breaking our part of the contract, which may result in unaligned reads and a drop in performance.</p>

<div class="notices note" ><p>Remember that our target alignment for block bodies is 8 bytes, thus because the header is 4 bytes long, our header must have an alignment of 4 (but not 8!) to ensure the desired alignment of the body.</p>
</div>

<p>The fix is simple, even if the user asked for 12 bytes, let&rsquo;s give him 16:</p>

    <figure class="center" >
        <img src="/img/wasmMemoryAllocator/alignedBody.png"  alt="Aligned block bodies"   class="rounded"/>

        
            <figcaption class="center" >All the bodies are aligned to 8.</figcaption>
        
    </figure>


<p>As you can see, the alignment is now back to what is expected.</p>
<p>Now that we are aware of that, let&rsquo;s discuss the <code>get_real_block_size</code> function:</p>
<p>Beside the 4 bytes header there must be enough room for two 4 bytes pointers plus a 4 bytes footer, thus the minimal block has 12 bytes of body + footer, and we can check that with a size of 12 the next block will have the required alignment, perfect.</p>
<p>Now if the caller requests <em>n</em> bytes of body, <em>n &gt; 8</em>, how much should we allocate to preserve the alignment?
Simple, we know that the body has an alignment of 8, thus <code>body_size + footer_size + next_header_size = body_size + 8</code> must be a multiple of 8, in other words the body size must be a multiple of 8, and we add 4 bytes for the footer.</p>
<p>Here is a way do to just that in a few lines:</p>
<pre tabindex="0"><code class="language-zph" data-lang="zph">fun get_real_block_size(size: i32): i32 {
    if size &lt;= 8 {
        return 12
    }
    let body_size = (size + 0b111) &amp; -0b1000
    return body_size + 4
}
</code></pre><p>Here we used a trick to compute the body size: the <code>&amp; -0b1000</code> operation cleans the 3 last bits, because WebAssembly uses two&rsquo;s complement arithmetics and thus <code>-0b1000</code> evaluates to <code>0b1111....1111000</code>(with 32 ones and zeroes).
Thus, <code>(size + 0b111) &amp; -0b1000</code> evaluate to <code>size</code> itself if it&rsquo;s already a multiple of 8, or to the next multiple of 8 otherwise.</p>
<p>And with this, we have seen most of the interesting parts of our linked list allocator, congrats for sticking with me this far 🎉</p>
<h2 id="a-final-remark">A final remark</h2>
<p>Ok great, we have built an allocator, but it runs in O(n), it doesn&rsquo;t look like it&rsquo;s anything close to something usable in any serious language or application&hellip;
Well, yes and no.</p>
<p>It&rsquo;s clear that no one want to use an O(n) function for every single memory allocation, but there are ways to mitigate that:
we can organize our memory better.</p>
<p>Usually, the memory is split in two big parts:</p>
<ul>
<li>The <em>stack</em>: a place where a new chunks of memory is pushed on function call, and freed on function return.</li>
<li>The <em>heap</em>: everything else.</li>
</ul>
<p>It&rsquo;s <em>very fast</em> to allocate some space on the stack, it&rsquo;s basically incrementing a pointer. However, because the memory is freed on function return it&rsquo;s not possible to allocate object that outlive the function there, it&rsquo;s the job of <a href="https://en.wikipedia.org/wiki/Escape_analysis">escape analysis</a> to decide whether a chunk of memory can be allocated on the stack or not.</p>

<div class="notices note" ><p>But, there is already a stack in WebAssembly right?</p>
<p>Yes, that&rsquo;s true, however this stack is not addressable, we can&rsquo;t have a pointer to data stored there.
That&rsquo;s why LLVM for instance uses a <em>shadow stack</em>, it&rsquo;s basically another stack that lives in the linear memory and that can be directly addressed.</p>
</div>

<p>Unfortunately, we can&rsquo;t allocate everything in the stack, and we don&rsquo;t want to pay O(n) per heap allocation.</p>
<p>A frequent solution to this problem is to use <em>segregated lists</em>, where instead of having a single free list with blocks of various sizes, we can maintain a bunch of lists with fixed block sizes, let&rsquo;s say 8, 16, 32, 64 and so on&hellip;</p>
<p>When the user requests a block, we round the size up to the next power of 2 and take the first block of the corresponding free list, that&rsquo;s O(1) for the allocation, and we put it back in the list on free, that&rsquo;s O(1) too.</p>
<p>But what happens when there is no block left in the segregated free lists or when the stack is full? We fall back to our O(n) allocator to get some more memory to grow the stack or add a few blocks to the segregated lists!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Thank you for reading that far! I hope you enjoyed this article and learned a thing or two about memory mangement or WebAssembly. If you have any question, remark or feedback don&rsquo;t hesitate to open an issue <a href="https://github.com/CharlyCst/CharlyCst.github.io/issues">here</a>.</p>
<p>If you want, you can also play with the allocator online right <a href="https://charlycst.github.io/wasm-mem-preview/">here</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Introducing Parrot</title>
            <link>https://charlycst.github.io/posts/introducing-parrot/</link>
            <pubDate>Fri, 16 Oct 2020 19:10:59 +0200</pubDate>
            
            <guid>https://charlycst.github.io/posts/introducing-parrot/</guid>
            <description>I recently published my very first crate, a new step in my journey learning rust. I really enjoyed developing it and as it started becoming usable enough for my own needs I decided to publish it, so let&amp;rsquo;s do it properly!
Before jumping in and telling you what that crate actually is about, let&amp;rsquo;s start with some context.
This code does not compile As a hobby project for the last couple of months I have been building my very own compiler.</description>
            <content type="html"><![CDATA[<p>I recently <a href="https://crates.io/crates/parrot-snap">published my very first crate</a>, a new step in my journey learning rust. I really enjoyed developing it and as it started becoming usable enough for my own needs I decided to publish it, so let&rsquo;s do it properly!</p>
<p>Before jumping in and telling you what that crate actually is about, let&rsquo;s start with some context.</p>
<h2 id="this-code-does-not-compile">This code does not compile</h2>
<p>As a hobby project for the last couple of months I have been building my very own compiler. The project was going well: I built the lexer, the parser, a typing system and a custom backend and then finally ran my first program in my very own language.</p>
<p>I started adding end-to-end tests as soon as the full pipeline was working, that is easy to do for a compiler: collect a list of correct programs, compile them, run the binary and check that your program exits with the expected value.</p>
<p><em>But that only works for correct programs.</em></p>
<p>However, a compiler really has two jobs:</p>
<ul>
<li>Compile correct programs</li>
<li>Help you figure out why a wrong program is wrong.</li>
</ul>
<p>How about wrong programs now? Ideally a compiler has some sort of error reporting mechanism, and I put efforts into building one, so you expect it to produce rich and meaningful errors.</p>
<p>But now how do you test your error messages then? Well, you expect them to either stay the same or to improve over time. Hard-coding the errors for each test really looked like a bad idea because of the maintenance burden, instead I quickly became interested again in something I used a while ago in a different context: <em>snapshot testing</em>.</p>
<h2 id="can-you-remember-that-for-me">Can you remember that for me?</h2>
<p>I discovered snapshot testing while doing web development with <a href="https://jestjs.io/">Jest</a>, a JavaScript framework for testing React components. The way it works (or at least worked a few years back) is by literally taking snapshot of a serialized version of your components, then each time you re-run the tests Jest tells you if a component changed.</p>
<p>So here is the idea: I have a bunch of wrong programs, I want my compiler to generate errors for each of them and be able to check that errors do not change over time, or if they do I want to be able to check if the newer improve over the latter.</p>
<p>I looked for a tool doing this automatically, but I couldn&rsquo;t find something that really did what I wanted&hellip; Anyway, challenge accepted.</p>
<h2 id="parrot">Parrot?</h2>
<p>Let me present <a href="https://github.com/CharlyCst/parrot">parrot</a>, a snapshot CLI tool that makes end-to-end testing a piece of cake!</p>
<p>Why parrot? Well, it can repeat the output of a program if you ask it to&hellip; Plus I like birds.</p>
<p>It&rsquo;s a breeze to set up and use, let me walk you through:</p>
<p>You first need to initialize parrot in your directory, that&rsquo;s as easy as <code>parrot init</code>. Then we will ask it to remember the output of a command of our choice: <code>parrot add 'echo &quot;Hello, world!&quot;'</code>. Finally, let&rsquo;s check that the output didn&rsquo;t change: <code>parrot run</code>. Done.</p>

    <figure class="center" >
        <img src="/img/introducingParrot/demo.png"  alt="Using parrot cli"   class="rounded"/>

        
    </figure>


<p>Let&rsquo;s add some spice with a command whose output actually change: <code>parrot add date</code>.</p>

    <figure class="center" >
        <img src="/img/introducingParrot/fail.png"  alt="Parrot cli detect a change"   class="rounded"/>

        
    </figure>


<p>And voilà! You get a failure with a diff of the outputs, so that you can decide whether the change is a regression or not by yourself.</p>
<h2 id="a-few-tricks">A few tricks</h2>
<p>Let&rsquo;s imagine that we are developing a command line tool, let&rsquo;s say <a href="https://stedolan.github.io/jq/tutorial/">jq</a> for the sake of example, how could we use parrot to test it?</p>
<p>First let&rsquo;s create a few json to test <em>jq</em> with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;{&#34;items&#34;: 2, &#34;quality&#34;: &#34;good&#34;, &#34;ids&#34;: [1, 2]}&#39;</span> &gt; simple.json
</span></span><span style="display:flex;"><span>curl <span style="color:#e6db74">&#39;https://api.github.com/repos/torvalds/linux/commits?per_page=5&#39;</span> &gt; linux.json
</span></span></code></pre></div><p>Now let&rsquo;s add a few tests:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>parrot add <span style="color:#e6db74">&#34;cat simple.json | jq &#39;.items&#39;&#34;</span>
</span></span><span style="display:flex;"><span>parrot add <span style="color:#e6db74">&#34;cat simple.json | jq &#39;.ids&#39;&#34;</span>
</span></span><span style="display:flex;"><span>parrot add <span style="color:#e6db74">&#34;cat simple.json | jq &#39;.ids[0]&#39;&#34;</span>
</span></span><span style="display:flex;"><span>parrot add <span style="color:#e6db74">&#34;cat linux.json | jq &#39;.[0] | .commit.author.email&#39;&#34;</span>
</span></span><span style="display:flex;"><span>parrot add <span style="color:#e6db74">&#34;cat linux.json | jq &#39;.[] | .commit.author.email&#39;&#34;</span>
</span></span><span style="display:flex;"><span>parrot add <span style="color:#e6db74">&#34;cat linux.json | jq &#39;.[0] | {sha: .sha, name: .commit.author.name}&#39;&#34;</span>
</span></span><span style="display:flex;"><span>parrot add <span style="color:#e6db74">&#34;cat linux.json | jq &#39;[.[] | {sha: .sha, name: .commit.author.name}]&#39;&#34;</span>
</span></span></code></pre></div><p>A first interesting feature of <em>parrot</em> is that it lets you browse your tests and interact with them in a custom REPL that you can open with the <code>parrot</code> command.</p>

    <figure class="center" >
        <img src="/img/introducingParrot/repl.png"  alt="Parrot REPL"   class="rounded"/>

        
    </figure>


<p>You can find the list of all available commands <a href="https://github.com/CharlyCst/parrot#commands">here</a>, let&rsquo;s just try a few of them.</p>
<p>Imagine you&rsquo;re working on the array indexing of <em>jq</em>: most likely you are only interested on a few tests. Parrot lets you add a description for each test, you can add tags in that description and later filter tests on them.</p>
<p>For this example I created an <code>#indexing</code> tag, now I can filter the tests with the <code>filter #indexing</code> command, or <code>f #indexing</code> for short, then run the selected tests: <code>run *</code> or <code>r *</code> for short:</p>

    <figure class="center" >
        <img src="/img/introducingParrot/parrot.gif"  alt="Parrot demo"   class="rounded"/>

        
    </figure>


<p>You can also execute the same parrot commands from the CLI, which can be handy for scripting purpose:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>parrot exec <span style="color:#e6db74">&#39;filter #indexing; r *&#39;</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>And that&rsquo;s already it for this short presentation of <a href="https://github.com/CharlyCst/parrot">parrot</a>, feel free to try it and don&rsquo;t hesitate to open an issue, for both feedbacks and bugs!</p>
<p>Personally I&rsquo;m using parrot more and more in my own projects, and will continue to work on it until that it can scale to hundreds of tests.</p>
]]></content>
        </item>
        
        <item>
            <title>Wasm binary encoding</title>
            <link>https://charlycst.github.io/posts/wasm-encoding/</link>
            <pubDate>Fri, 12 Jun 2020 08:00:00 +0100</pubDate>
            
            <guid>https://charlycst.github.io/posts/wasm-encoding/</guid>
            <description>Lately I have been working on my own compiler (for fun &amp;amp; glory) targeting WebAssembly. The inner working of a compiler is well documented and there are plenty of production-grade examples to look at (for instance this book and the rustc dev guide), but when it comes down to writing bytes one after the other the only thing you can hold onto is the specification.
Don&amp;rsquo;t get me wrong, the specification is great, but it may be a little rough at first.</description>
            <content type="html"><![CDATA[<p>Lately I have been working on <a href="https://github.com/CharlyCst/zephyr">my own compiler</a> (for fun &amp; glory) targeting WebAssembly. The inner working of a compiler is well documented and there are plenty of production-grade examples to look at (for instance this <a href="http://craftinginterpreters.com/">book</a> and the <a href="https://rustc-dev-guide.rust-lang.org/">rustc dev guide</a>), but when it comes down to writing bytes one after the other the only thing you can hold onto is the <a href="https://webassembly.github.io/spec/">specification</a>.</p>
<p>Don&rsquo;t get me wrong, the specification is great, but it may be a little rough at first. I spent quite some time wrapping my head around branching, number encoding, types and sections, so I feel like I should write that down.</p>
<p>And here we are! In this post I will walk you through the bytes of a simple wasm module, one by one, and by the end you&rsquo;ll be able to tell what <em>any</em> of those do.</p>
<h2 id="the-wasm-stack-machine">The wasm stack machine</h2>
<p>Let&rsquo;s start with the basics: what is WebAssembly (wasm) exactly?</p>
<p>WebAssembly is a set of binary instructions which looks like that with your favorite hex dumper:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>00000000: 0061 736d 0100 0000 0107 0160 027f 7f01  .asm.......`....
</span></span><span style="display:flex;"><span>00000010: 7f03 0201 0007 0701 0361 6464 0000 0a09  .........add....
</span></span><span style="display:flex;"><span>00000020: 0107 0020 0020 016a 0b                   ... . .j.
</span></span></code></pre></div><p>But you may be more familiar with its textual form (<em>wat</em>, standing for WebAssembly Text):</p>
<pre tabindex="0"><code class="language-wasm" data-lang="wasm">(module
  (func $add (param $lhs i32) (param $rhs i32) (result i32)
    get_local $lhs
    get_local $rhs
    i32.add)
  (export &#34;add&#34; (func $add))
)
</code></pre><p>There are tools to go from one to the other, if you are planning to get your hands dirty with wasm I strongly recommend investing in such <a href="https://github.com/WebAssembly/wabt">tooling</a>, it will save you many hours of debugging.</p>
<p>Those instructions are targeting a stack based virtual machine following the WasAssembly specification, there are plenty of such VM out there: the <a href="https://github.com/WebAssembly/spec/tree/master/interpreter">reference interpreter</a>, <a href="https://github.com/bytecodealliance/wasmtime">Wasmtime</a> or the one in your browser to quote a few.</p>
<p>The &lsquo;stack based&rsquo; part means that the VM is doing its calculation on a stack, to compute <code>3 + 5</code> it first pushes 3 onto the top of the stack, then 5 and finally uses the <code>add</code> instruction which consume the topmost two values and push the result back on the stack.</p>
<pre tabindex="0"><code class="language-wasm" data-lang="wasm">i32.const 3
i32.const 5
i32.add
</code></pre>
    <figure class="center" >
        <img src="/img/wasmEncoding/stack.jpg"  alt="Stack machine"   class="rounded"/>

        
    </figure>


<p>There is another common family of VM called register-based, which as you guess operate on registers. With such an instruction set adding 3 and 5 would be done in a single instruction, if you already have the values somewhere. It may look like this:</p>
<pre tabindex="0"><code class="language-wasm" data-lang="wasm">(; store the result of register_a + register_b in register_c ;)
i32.add register_c register_a register_b
</code></pre><p>As you can see overall register based machines tend to use fewer instructions, they also tend to be faster to interpret because they require less instruction dispatch, but the code size tend to be larger (<a href="https://www.usenix.org/legacy/events/vee05/full_papers/p153-yunhe.pdf">here</a> is a very interesting comparison if you are interested).</p>
<p>But back to WabAssembly, targeting a stack machine is a good thing for us, compiler writers, because it&rsquo;s generally easier: we don&rsquo;t have to bother with registers at all.</p>
<h2 id="the-module-structure">The module structure</h2>
<p>Wasm code is separated into <strong>modules</strong>, each module contains a given number of <strong>sections</strong> which in turn have their own layout.</p>
<p>Before digging into the details I have to warn you that we are going to write quite a few bytes by hand, so from now on I may omit the <code>0x</code> part before hexadecimal numbers: consider that every number that follows are written in hexadecimal.</p>
<p>A module always starts with the magic number <code>00 61 73 6d</code> followed by the version number, 01 at the time of writing, or <code>01 00 00 00</code> in <a href="https://en.wikipedia.org/wiki/Endianness#Little-endian">little-endian</a>. You may have noticed that the magic number corresponds to the string <code>\0asm</code>, you can spot it in the hexdump I showed at the beginning.</p>
<p>So let&rsquo;s write our very first wasm module (in bytes of course):</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/header.jpg"  alt="Wasm header"   class="rounded"/>

        
    </figure>


<p>It&rsquo;s not very useful for now, we will need to add a few sections to actually do something with our module.</p>
<p>At the time of writing there are 11 predefined sections:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Section name   code     description
</span></span><span style="display:flex;"><span>Type           0x01   <span style="color:#75715e"># Function signature definitions </span>
</span></span><span style="display:flex;"><span>Import         0x02   <span style="color:#75715e"># Import declarations</span>
</span></span><span style="display:flex;"><span>Function       0x03   <span style="color:#75715e"># Function declarations</span>
</span></span><span style="display:flex;"><span>Table          0x04   <span style="color:#75715e"># Tables used by call_indirect</span>
</span></span><span style="display:flex;"><span>Memory         0x05   <span style="color:#75715e"># Memory attributes</span>
</span></span><span style="display:flex;"><span>Global         0x06   <span style="color:#75715e"># Global declarations</span>
</span></span><span style="display:flex;"><span>Export         0x07   <span style="color:#75715e"># Exports declaration</span>
</span></span><span style="display:flex;"><span>Start          0x08   <span style="color:#75715e"># Start function declaration, if any</span>
</span></span><span style="display:flex;"><span>Element        0x09   <span style="color:#75715e"># Elements declaration</span>
</span></span><span style="display:flex;"><span>Code           0x0a   <span style="color:#75715e"># Function code</span>
</span></span><span style="display:flex;"><span>Data           0x0b   <span style="color:#75715e"># Any type of data</span>
</span></span></code></pre></div><p>That is a lot, I will just walk you through a few of them, you can learn more by reading the
<a href="https://webassembly.github.io/spec/">spec</a> (or reading other posts ¯\_(ツ)_/¯).</p>
<h2 id="writing-a-wasm-function">Writing a wasm function</h2>
<p>Let&rsquo;s say we want to put an &lsquo;add&rsquo; section in our module, we will need three sections:</p>
<ul>
<li><strong>Type</strong>: we need to register the type of our function, in this case let&rsquo;s say <code>(i32, i32) -&gt; i32</code>.</li>
<li><strong>Function</strong>: once the type is declared, we need to declare a function with that type.</li>
<li><strong>Code</strong>: finally we put the body of the function in the Code section.</li>
</ul>
<p>This may seems like a lot of work for defining a simple function, but this can be rationalized by the goals of WebAssembly:</p>
<blockquote>
<ol>
<li>Define a portable, size- and load-time-efficient binary format to serve as a compilation target.</li>
</ol>
<p><a href="https://webassembly.org/docs/high-level-goals/">WebAssembly High-Level Goals</a></p>
</blockquote>
<p>By defining all the types in one place we can avoid duplication, if you have a thousand functions with type <code>i32 -&gt; i32</code> you just need to declare it once and refer to it in multiple functions declaration, saving precious bytes of bandwidth. Similarly, a note in the specification justify the separation of Function and Code as a way to enable parallel and streaming compilation.</p>
<p>A section is encoded in three parts:</p>
<ul>
<li>One byte for its id, e.g. <code>0x01</code> for Type and so on.</li>
<li>Its size encoded as a <code>u32</code>, more on that later.</li>
<li>The content, this actually depend on the section.</li>
</ul>
<h3 id="declaring-a-type">Declaring a type</h3>
<p>The <em>Type</em> section is rather simple, it starts with the number of types (a <code>u32</code>) and then simply encodes each type one after the other. At this point we have no choice but to grab the <a href="https://webassembly.github.io/spec/">specification</a> (unfortunately I&rsquo;m not yet sponsored to promote the spec&hellip;).</p>
<p>Have a look at the &ldquo;Binary Format&rdquo; chapter, there we learn that the value type <code>i32</code> is encoded by <code>0x7f</code>. The function type is a little more complicated:, it starts with <code>0x60</code> followed by a vector of parameters types and another vector for return types. Vectors are simply encoded as their size followed by the actual elements.</p>
<h4 id="a-word-on-integers">A word on integers</h4>
<p>Now it&rsquo;s time to talk about integer encoding in WASM, because we need it to encode sizes of vectors and the section itself. WebAssembly is meant to be compact and thus uses a compressed representation for integers, more precisely the <a href="https://en.wikipedia.org/wiki/LEB128">LEB128 encoding</a> (standing for Little Endian Base 128).</p>
<p>The little endian part means that the least significant bytes goes first, while the base 128 part is because we actually only use 7 bits out of 8 in each byte: the eighth bit is either 1 if there are still non-zero bits to comes, 0 otherwise. Thanks to the eighth bit there is no need to add leading zeroes
(well, actually trailing zeroes in little endian&hellip;). It saves precious bytes of bandwidth.</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/leb.jpg"  alt="LEB128 encoding of 70 000"   class="rounded"/>

        
    </figure>


<p>Actually we will never use integers larger than 128 in this post, but that is the reason why integers only use one byte in the following.</p>
<p>Now we know all we need to encode the type section: let&rsquo;s put everything together.</p>
<p>To encode the type <code> (i32, i32) -&gt; i32</code>we need a vector of size 2 containing two times <code>i32</code> for the arguments and one of size 1 for the return type.</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/type_1.jpg"  alt="Type section"   class="rounded"/>

        
    </figure>


<p>There is only one type in our type sections</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/type_2.jpg"  alt="Type section"   class="rounded"/>

        
    </figure>


<p>Finally, we can compute its size, 7 bytes, and add the section ID <code>0x01</code></p>

    <figure class="center" >
        <img src="/img/wasmEncoding/type_3.jpg"  alt="Type section"   class="rounded"/>

        
            <figcaption class="center" >The Type section</figcaption>
        
    </figure>


<p>And we are done with our first section 🎉</p>
<h3 id="registering-a-function">Registering a function</h3>
<p>Now we need to register a function, are you ready? This is going to be very fast:</p>
<p>We have a single function, and it has the type with index 0 of the Type section we just wrote</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/fun_1.jpg"  alt="Function section"   class="rounded"/>

        
    </figure>


<p>The Function section ID is <code>0x03</code>, its size is 2</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/fun_2.jpg"  alt="Function section"   class="rounded"/>

        
            <figcaption class="center" >The Function section</figcaption>
        
    </figure>


<p>And boom! The Function section is done!</p>
<h3 id="adding-the-function-body">Adding the function body</h3>
<p>It is the part where we actually encore the body of our function, inside the <em>Code</em> section.</p>
<pre tabindex="0"><code class="language-wasm" data-lang="wasm">func $add (param $lhs i32) (param $rhs i32) (result i32)
    get_local $lhs
    get_local $rhs
    i32.add
</code></pre><p>There is only three instructions to encode: two <code>get_local</code> and a <code>i32.add</code>. We need to check the spec here, it says that <code>get_local</code> is encoded by the byte <code>0x20</code> followed by its argument, that is the index of the function argument we want to get back. So <code>get_local $first_argument</code> is encoded <code>20 00</code> while <code>get_local $second_argument</code> is <code>20 01</code>.</p>
<p>The instruction <code>i32.add</code> doesn&rsquo;t take any argument (because WebAssembly is a stack machine), it just removes the top two values of the stack and put back the sum, it is encoded by the byte <code>0x6a</code>.</p>
<p>The spec also says that the function body must end with a special <code>end</code> instruction, encoded by <code>0x0b</code></p>
<p>So that&rsquo;s it, the body of our <code>add</code> function is encoded as:</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/code_1.jpg"  alt="Code section"   class="rounded"/>

        
    </figure>


<p>We also need to specify a vector of locals, but we don&rsquo;t use any here, so it&rsquo;s an empty vector encoded by its size (0) with no elements, in other words the single byte <code>0x00</code></p>

    <figure class="center" >
        <img src="/img/wasmEncoding/code_2.jpg"  alt="Code section"   class="rounded"/>

        
    </figure>


<p>The body of the first (and only) function is 7 bytes long:</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/code_3.jpg"  alt="Code section"   class="rounded"/>

        
    </figure>


<p>We are done for the body of the section, it is 9 bytes long and the section has an ID of <code>0x0a</code>, thus the complete section is:</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/code_4.jpg"  alt="Code section"   class="rounded"/>

        
            <figcaption class="center" >The Code section</figcaption>
        
    </figure>


<p>In case you are wondering, I&rsquo;m not guessing what the section should look like, I just followed the spec once again: you can find the details in the subsection <em>Module</em> of the chapter <em>Binary Format</em>.</p>
<h3 id="bonus-exporting-a-function">Bonus: exporting a function</h3>
<p>At this point we are done, you can put those three section together and you have a working <code>add</code> function. The function is not exported, however, so you have no way to check if it works&hellip; Actually we just need one extra section to play with our handwritten wasm: the <em>Export</em> section, which as you may guess is responsible for telling which function is exported, and under which name.</p>
<p>To declare and export we need three things:</p>
<ul>
<li>A name.</li>
<li>The kind of thing to be exported (it is not limited to function).</li>
<li>Its index into the corresponding section.</li>
</ul>
<p>In our case the name is <code>add</code>, which corresponds to the bytes <code>61 64 64</code>, plus the size of the name, that gives us <code>03 61 64 64</code>.</p>
<p>We export a function, according to the spec we should prefix its ID by <code>00</code>, and because the function ID is also zero, that gives us:</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/export_1.jpg"  alt="Export section"   class="rounded"/>

        
    </figure>


<p>We have a single export, thus we have to prefix the section body by <code>01</code> which gives us a total size of 7 bytes. Because the section ID is <code>0x07</code>, the whole export section is encoded by:</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/export_2.jpg"  alt="Export section"   class="rounded"/>

        
            <figcaption class="center" >The Export section</figcaption>
        
    </figure>


<h2 id="putting-everything-together">Putting everything together</h2>
<p>And that&rsquo;s it! If we put each section back to back (plus the wasm module header), we get a valid and (kind of) usable wasm module!</p>

    <figure class="center" >
        <img src="/img/wasmEncoding/module.jpg"  alt="Wasm module"   class="rounded"/>

        
            <figcaption class="center" >A valid wasm module containing an `add` function</figcaption>
        
    </figure>


<p>I hope you enjoyed this post and learned a little more about wasm!</p>
]]></content>
        </item>
        
        <item>
            <title>An Interactive Introduction to Reinforcement Learning</title>
            <link>https://charlycst.github.io/posts/an-animated-introduction-to-rl/</link>
            <pubDate>Sat, 28 Mar 2020 21:01:09 +0100</pubDate>
            
            <guid>https://charlycst.github.io/posts/an-animated-introduction-to-rl/</guid>
            <description>Reinforcement learning (RL) is a branch of machine learning that aim at finding an (hopefully) optimal policy (or behavior) for an agent in a given environment. I find it the most interesting area of machine learning because applications, hide and seek, capture the flag or StarCraft II to quote a few, are really fun to watch, often mind-blowing and sometimes make me think that these virtual agent are truly intelligent.</description>
            <content type="html"><![CDATA[<script>
  function resizeIframe(obj) {
    setTimeout(function() {obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px';}, 300);
    setTimeout(function() {obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px';}, 1000);
    setTimeout(function() {obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px';}, 5000);
  }
</script>
<p>Reinforcement learning (RL) is a branch of machine learning that aim at finding an (hopefully) optimal policy (or behavior) for an agent in a given environment. I find it the most interesting area of machine learning because applications, <a href="https://openai.com/blog/emergent-tool-use/">hide and seek</a>, <a href="https://deepmind.com/blog/article/capture-the-flag-science">capture the flag</a> or <a href="https://deepmind.com/blog/article/alphastar-mastering-real-time-strategy-game-starcraft-ii">StarCraft II</a> to quote a few, are really fun to watch, often mind-blowing and sometimes make me think that these virtual agent are truly intelligent.</p>
<p>As always, because (even for human) doing is the best way of learning, I have spent some time playing around with RL algorithms, in this article I would like to share with you the intuition I developed for a few of these algorithms, through interactive environments and illustration of the theory behind. I will also try to give you a foretaste of practical applications outside of toy environments we are used to.</p>
<p>If you are already familiar with reinforcement learning, feel free to skip background explanation and jump directly to interactive examples. If you are not stick with me, this post does not assume any prior knowledge of the field, think about it as Reinforcement Learning 101 ;)</p>
<h2 id="the-setting">The setting</h2>
<p>In reinforcement learning we consider one or more <strong>agents</strong> evolving in an <strong>environment</strong>. Agents can perform actions and receive rewards or penalties accordingly. The goal is to maximize the cumulative sum of rewards by tuning the agent&rsquo;s <strong>policy</strong>, that is its behavior given the surrounding environment.</p>
<p>In this post we will consider a simple discrete and turn based 2D environment, in which a single agent (let&rsquo;s take Mario to make the whole thing more visually appealing) can perform one of these four actions each turn: going right, left, up or down. Mario will receive a reward each time he finds a block, and a penalty each time he encounters a goomba.</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/setting.png"  alt="Agent, penalty and reward"   class="rounded"/>

        
            <figcaption class="center" >Of course, images are the property of Nintendo</figcaption>
        
    </figure>


<h2 id="q-value-and-policy">Q-value and policy</h2>
<p>Now let&rsquo;s put ourselves in the shoes of Mario, imagine an even simpler 1D environment where there is a block two steps away on the right side while there is nothing on the left.</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/dummyEnv.png"  alt="A simple environment"   class="rounded"/>

        
    </figure>


<p>The optimal policy is pretty straightforward: always go right. But how do we know it for sure?</p>
<p>Well, nether going right or going left will earn Mario any reward, however we have the intuition that he should be going right because he will then be only one step away from the block. In other words, the position one step away in the right direction is of higher &ldquo;quality&rdquo; than the one one step away in the left direction. We call these quality values the <strong>Q-values</strong>.</p>
<p>Estimating the Q-values of each action for a given state of the environment is at the core of a whole class of RL algorithm, we are going to study a few of those.</p>
<p>We can compute the Q-value of a given action <em>a</em> in a given state <em>s</em> with the <strong>Bellman equation</strong>:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/bellmanEquation.svg"  alt="Simplified bellman equation"   style="width: 500px; margin: 1rem 0"  class="rounded"/>

        
    </figure>


<p>Where <em>Q(s, a)</em> is the Q-value of action <em>a</em> in state <em>s</em>, <em>R</em> is the reward Mario gets by taking such action and <em>s&rsquo;</em> is the state he ends up in. The term <em>π(s&rsquo;, a&rsquo;)</em> is the probability of choosing action <em>a&rsquo;</em> when the agent is in state <em>s&rsquo;</em>. <em>π</em> stands for <strong>policy</strong>, it is the function that determines the behavior of the agent.</p>
<p>The meaning of this equation is exactly what we talked about earlier: the quality of a given <em>(state, action)</em> pair is equal to the reward Mario gets by executing that action in that state, plus the quality of the next <em>(state, action)</em> pair available (weighted by the policy).</p>
<p>You may also have noticed the <em>γ</em> factor that weight the quality of future Q-Values in the above formula, it is called the <strong>discount factor</strong> and is a quantity between 0 and 1, but more on that a little later.</p>
<p>In fact, our toy example is simple enough so that we can solve the Bellman equation by hand, no need for a complex algorithm. Let&rsquo;s do it: grab a piece of paper!</p>
<h3 id="pen--paper-1-solving-the-bellman-equation">Pen &amp; Paper 1: Solving the Bellman Equation</h3>
<p>Just kidding, it will be quick and painless: I will do it for you ;)</p>
<p>First we need to decide on a policy, the easiest one is to always pick the best possible action: it is called the <strong>greedy policy</strong>. Let&rsquo;s put it in our Bellman equation, we just need to replace the sum by a max (because in this case π(s&rsquo;,a&rsquo;) = 1 if the choice is optimal, 0 otherwise).</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/bellmanGreedy.svg"  alt="Simplified bellman with greedy policy"   style="width: 500px; margin: 1rem 0"  class="rounded"/>

        
    </figure>


<p>We can start by the end: when Mario reaches a block the game is over, so basically for each action leading to a block <em>Q(s, a) = R = 1</em>.</p>
<p>Now for an action that leads to an empty state (no goomba or block), the reward is zero, then <em>Q(s, a) = γ max(Q(s&rsquo;, a&rsquo;))</em>.</p>
<p>So if an action <em>a</em> lead us to a state one step away of a block, the next best action is to reach the block and it has a Q-Value of 1 as we computed just earlier, and <em>Q(s, a) = γ * 1 = γ</em></p>
<p>Similarly, if we are two steps away from a block, walking toward the block earn us a reward of 0, but the next best action has a Q-Value of <em>γ</em>, thus if we are two steps away and walk toward a block: <em>Q(s, a) = γ²</em>.</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/qvalues.png"  alt="Q-Values in our example"   class="rounded"/>

        
    </figure>


<p>Can you guess what would be the Q-Values <em>Q(S5, LEFT)</em>? Yes <em>γ²</em> exactly, because if Mario is in state <em>S5</em> and goes left he will end up in <em>S4</em> where we already know that the best action is to go right with a Q-Value of <em>γ</em>.</p>
<h2 id="sarsa">Sarsa</h2>
<p>Now we suppose that the agent has no prior knowledge of the environment, thus the agent can&rsquo;t compute the exact Q-values as we did before. What we are going to do instead is to estimate the Q-values by updating them accordingly to our observations while exploring the environment.</p>
<p>We will use the <strong>Sarsa algorithm</strong> to learn Q-values and improve the behavior of the agent over time. Sarsa is a reinforcement learning algorithm that lay the foundations of a whole class of more evolved reinforcement learning algorithms. Having a deep understanding of Sarsa will actually help you to grasp advanced RL concepts more easily.</p>
<p>The algorithm is the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>Q <span style="color:#f92672">=</span> zeroed_q_values
</span></span><span style="display:flex;"><span>γ <span style="color:#f92672">=</span> discount_factor
</span></span><span style="display:flex;"><span>η <span style="color:#f92672">=</span> learning_rate
</span></span><span style="display:flex;"><span>next_s <span style="color:#f92672">=</span> initial_state
</span></span><span style="display:flex;"><span>next_a <span style="color:#f92672">=</span> choose_action(Q, initial_state)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#66d9ef">True</span>):
</span></span><span style="display:flex;"><span>	s <span style="color:#f92672">=</span> next_s
</span></span><span style="display:flex;"><span>	a <span style="color:#f92672">=</span> next_a
</span></span><span style="display:flex;"><span>	r, next_s <span style="color:#f92672">=</span> take_action(s, a)
</span></span><span style="display:flex;"><span>	next_a <span style="color:#f92672">=</span> choose_action(Q, next_s)
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	Q[s][a] <span style="color:#f92672">+=</span> η<span style="color:#f92672">*</span>(r <span style="color:#f92672">+</span> γ<span style="color:#f92672">*</span>Q[next_s][next_a] <span style="color:#f92672">-</span> Q[s][a])
</span></span></code></pre></div><p>In plain words: we start at state <em>s</em>, take an action <em>a</em>, observe a reward <em>r</em> and the next state <em>s&rsquo;</em>, we take another action <em>a&rsquo;</em> and then we can update the Q-Values by the quantity <em>ΔQ(a, s)</em> computed by:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/sarsaUpdateRule.svg"  alt="Sarsa update rule"   style="width: 500px; margin: 1rem 0"  class="rounded"/>

        
    </figure>


<p>This <strong>update rule</strong> gives us the guaranty that if all Q-values have converged in expectation (that is ⟨ΔQ(a, s)⟩ = 0), then our Q-Values are solutions of the Bellman equation.</p>
<p>If you are wondering why this algorithm is named Sarsa, the answer is the following:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/sarsa.png"  alt="Sarsa"   class="rounded"/>

        
    </figure>


<p>The name sums up all the steps of the algorithm, well almost, don&rsquo;t forget the update at the end&hellip; Maybe we should call it Sarsau 🤔</p>
<p>But enough theory, I promised you an <em>interactive</em> introduction to reinforcement learning, the time to fulfill my promises:</p>
<div>
<iframe src="https://charlycst.github.io/mario_rl/small" width="100%" height="400px" scrolling="no" onload="resizeIframe(this)"></iframe>
</div>
<p>(If the iframe is not loading for some reason, try to refresh the page or check it <a href="https://github.com/CharlyCst/mario_rl/blob/master/links.md">here</a>)</p>
<p>You can start the simulation by clicking the leftmost button, you will see the agent (Mario) walking randomly. Mario is following a greedy policy in this first example, but because at the beginning all Q-Values are 0, he chooses actions randomly.</p>
<p>The color map depict the Q-Values, it will be updated for the first time when Mario finds either a block or a goomba (because before that all received rewards are zero, as well as all Q-Values, check the update rule).</p>
<p>In this case the Q-Values are stored in a 3d array indexed by x and y positions, as well as actions: <em>Q(x, y, a)</em>. To keep visualization simple, each square of the color map is divided into 4 triangles, representing the 4 actions possible in each state. Thus, the leftmost triangle of the square <em>(x, y)</em> represent <em>Q(x, y, LEFT)</em>, the topmost <em>Q(x, y, UP)</em> and so on.</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/colormap.png"  alt="Colormap explanation"   class="rounded"/>

        
    </figure>


<p>A fuchsia triangle indicates an action with a high Q-value, while cyan stands for low (negative) Q-values.</p>
<p>To see those Q-values appear you can speed up the agent (middle button) instead of waiting. You can also reset Q-values to observe the agent re-learn for scratch, this will be especially useful in the upcoming environments because of the probabilistic nature of reinforcement learning, always run a few simulations before making any conclusion.</p>
<h2 id="exploration-vs-exploitation-dilemma">Exploration vs Exploitation dilemma</h2>
<p>You may have noticed that the agent will quickly find a path that leads to a reward, however if you are unlucky that path may not be optimal, in that case the agent will stubbornly execute the same sequences of suboptimal choices over and over again. The agent is not aware of the existence of a better path, it just <strong>exploits</strong> its current knowledge of the environment.</p>
<p>To improve its behavior, the agent should sometime <strong>explore</strong> and look for better options. Choosing between both option is what we call the <strong>exploration vs exploitation dilemma</strong>.</p>
<p>The greedy policy leave no room for exploration: the best action - <em>based on the current knowledge</em> - is always selected.</p>
<p>Fortunately, there are other policies that encourage more or less exploration. One of these is called <strong>ε-greedy</strong>: with a probability ε the agent takes a random action, otherwise it fallbacks to the usual greedy policy.</p>
<p>The <strong>softmax policy</strong> is another well known example: it weights each action accordingly to its estimated Q-Value:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/softmaxPolicy.svg"  alt="Softmax policy"   style="width: 300px; margin: 1rem 0"  class="rounded"/>

        
    </figure>


<p>Note that the softmax policy introduce a parameter, <em>β</em>, whose impact depends on the actual value of the Q-Values, itself depending on the rewards and their distributions in the environment. In other words, if you decide to double both rewards and penalty this will impact the behavior of an agent following a softmax policy, but there will be no change for an agent using <em>ε</em>-greedy.</p>
<p>It&rsquo;s better if you judge by yourself: this time I&rsquo;ve put a red block that is only worth 0.5 points while the yellow one is still worth 1 point. It&rsquo;s easier to get the first, but if the agent explores a little more it may find out that it&rsquo;s not the best option. Don&rsquo;t be shy to try huge epsilon or small beta to force random exploration, once you are done exploring switch to greedy policy by setting epsilon to 0.</p>
<div>
<iframe src="https://charlycst.github.io/mario_rl/policies" width="100%" height="400px" scrolling="no" onload="resizeIframe(this)"></iframe>
</div>
<h2 id="a-few-words-on-parameters">A few words on parameters</h2>
<p>In fact, what I just said about a block further away but giving twice the reward being a better option is not always true, it depends on <em>γ</em>, <strong>the discount factor</strong>.</p>
<p>Remember when we solved the Bellman equation earlier? We found out that if an action put the agent in a state one step away from a block (with a reward of 1 point) it&rsquo;s Q-Value is <em>Q(s, a) = γ</em>, if it&rsquo;s two steps away <em>Q(s, a) = γ²</em>, and extrapolating, if it is <em>n</em> steps away <em>Q(s, a) = γⁿ</em>.</p>
<p>The general formula in our particular set up, with the greedy policy and with a reward <em>r</em> is <em>Q(s, a) = γⁿ * r</em>. This mean that if you set the discount factor to 0.5, a reward of 2 has the same perceived value than a reward of 1 one step closer to the agent.</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/gammaExample.png"  alt="The effect of discount factor"   class="rounded"/>

        
            <figcaption class="center" >The yellow block worth 2 points, the red one is worth 1 and γ=0.5</figcaption>
        
    </figure>


<p>The lower the discount factor, the more the agent will go for short term rewards. Conversely, a discount factor close to 1 will much less penalize the agent for long term planing, or for taking a few days off. It&rsquo;s your job to pick the right value for your use case.</p>
<p>Another parameter I didn&rsquo;t talk about is <em>η</em>, the <strong>learning rate</strong>. If you already have a machine learning background you might be used to it, otherwise it is exactly what you think it is: the rate at which the agent is learning.</p>
<p>Set it too high and the Q-values will oscillate (even if a good path is found it can be unlearned very quickly), set it too low and the agent will take ages before learning anything. A common strategy is to start with a rather high value and  progressively bring it down to a final, rather low learning rate.</p>
<p>As always, when it comes to picking parameters it is up to you to strike the right balance.</p>
<p>To let you play with the discount factor the red block (worth 0.5 points) is still there. Pick a value for <em>γ</em> and check which block the agent choose (don&rsquo;t forget to explore!). You can also try extreme values of learning rate and see what happens. Just be curious!</p>
<div>
<iframe src="https://charlycst.github.io/mario_rl/parameters" width="100%" height="400px" scrolling="no" onload="resizeIframe(this)"></iframe>
</div>
<h2 id="multi-steps-sarsa">Multi-steps Sarsa</h2>
<p>If you read that far I guess that you spend some time watching the agent evolve in its environment, you may have been annoyed by the fact that the agent needs to complete a few episodes before learning a complete path. In fact if a reward is <em>n</em> steps away, the agent needs at least <em>n</em> episodes before information about the reward reach the initial state.</p>
<p>We can do better, for instance we can change the update rule to actually update the Q-value after two steps instead of one:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/twoStepsSarsa.svg"  alt="Two steps Sarsa"   style="width: 600px; margin: 1rem 0"  class="rounded"/>

        
    </figure>


<p>The algorithm with the updated rule is called <strong>2-steps-Sarsa</strong>. Now the agent needs to take two steps before being able to update the Q-Value: start in <em>s</em>, take action <em>a</em>, observe reward <em>r</em> and get to <em>s&rsquo;</em> then again take action <em>a&rsquo;</em>, observe reward <em>r&rsquo;</em> and get to <em>s&rsquo;&rsquo;</em>, finally take action <em>a&rsquo;&rsquo;</em> and update.</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/sarsarsa.png"  alt="Sarsarsa"   class="rounded"/>

        
    </figure>


<p>Yep, you can call it Sarsarsa if you want to.</p>
<p>In the end, what this new update rule means is that when the agent updates its Q-Value <em>Q(s, a)</em>, it will take into account the two next rewards and the Q-Value two steps further, <em>Q(s&rsquo;&rsquo;, a&rsquo;&rsquo;)</em>, that is the quality of the situation two steps away from <em>s</em>.</p>
<p>Intuitively, the agent will propagate the information two steps back each time. Thus, if a reward is 4 steps away, the agent needs only 2 trials to propagate information back to the initial state (assuming that it follows two times the same path).</p>
<p>Obviously Sarsa can be generalized to take any number of steps into account, the update rule for <em>n-steps-Sarsa</em> is:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/nStepsSarsa.svg"  alt="n steps Sarsa"   style="width: 600px; margin: 1rem 0"  class="rounded"/>

        
    </figure>


<p>From a practical view, to implement <em>n-steps-Sarsa</em> you need to keep track of the <em>n</em> last states, actions and rewards, but other than that the algorithm is very similar.</p>
<p>If all of this is still a little confusing, it will hopefully become much clearer with an example:</p>
<div>
<iframe src="https://charlycst.github.io/mario_rl/multi" width="100%" height="400px" scrolling="no" onload="resizeIframe(this)"></iframe>
</div>
<h2 id="q-learning">Q-Learning</h2>
<p>I know that there is already a lot to digest, but would like to talk about one last variant of Sarsa: <strong>Q-learning</strong>.</p>
<p>Remember the Bellman equation? I paste it here again so that you don&rsquo;t need to scroll up:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/bellmanEquation.svg"  alt="Simplified bellman equation"   style="width: 500px; margin: 1rem 0"  class="rounded"/>

        
    </figure>


<p>Here <em>π</em> is the policy. Ideally in the end we want to pick the greedy policy, however as we discussed before we need to pick a policy that allows the agent to explore, for instance <em>ε</em>-greedy.</p>
<p>It is important to understand that the policy we choose decides the &ldquo;real&rdquo; Q-values that we are trying to estimate with Sarsa. Thus, if the agent is trained with a policy that is not the greedy policy it will learn a suboptimal behavior, because that behavior takes into account the fact that the agent can make mistakes.</p>
<p>An example is worth a thousand words, imagine that our agent is walking alongside a cliff and receive a negative reward if it falls. In our setting let&rsquo;s say that Mario is walking alongside a line of goomba instead:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/cliff.png"  alt="A cliff of goomba!"   class="rounded"/>

        
    </figure>


<p>The reward is right there on the cliff edge. With the greedy policy there is no risk of falling because the agent always pick the best action, thus Q-values along the cliff will be high.</p>
<p>However, if the agent follows an <em>ε</em>-greedy policy there is a risk of falling when walking on the edge, thus Q-Values along the cliff will be lower in that case. If the agent can make mistakes, staying one step away from the edge is much safer and that path is only 2 steps longer, Q-values might be higher there.</p>
<p>So what if you want to learn the optimal path? You can&rsquo;t really use the greedy policy with Sarsa because without exploration there is too much of a risk of staying stuck with a suboptimal path. That is where Q-Learning comes in.</p>
<p>The Sarsa algorithm is what we call an <strong>on-policy</strong> algorithm, because it learns with the same policy that dictates its behavior. Whereas Q-Learning is an <strong>off-policy</strong> algorithm, it uses the greedy policy to learn but its behavior follows another policy during training, for instance <em>ε</em>-greedy.</p>
<p>In other words, Q-learning allows the agent to learn the Q-values corresponding to the greedy policy (the best one) while still allowing it to explore by following a probabilistic policy during training.</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/SarsaVsQLearning.png"  alt="Sarsa VS Q-learning path"   class="rounded"/>

        
    </figure>


<p>More formally, Q-learning estimates the Q-Values for the Bellman equation with the greedy policy:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/bellmanGreedy.svg"  alt="Simplified bellman with greedy policy"   style="width: 450px; margin: 1rem 0"  class="rounded"/>

        
    </figure>


<p>But actually follows a policy that allows exploration. Thus, it uses a slightly different update rule than Sarsa:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/qLearning.svg"  alt="Q-Learning update rule"   style="width: 500px; margin: 1rem 0"  class="rounded"/>

        
    </figure>


<p>As you can see, the only difference is that we do not update the Q-Value using the next chosen action <em>a&rsquo;</em> (based on the current non-greedy policy) but with the best possible action <em>a</em>*, as if we used Sarsa with the greedy policy.</p>
<p>Let&rsquo;s just see how it works in practice: try to use Q-learning with <em>ε</em>-greedy and when the agent has learned for long enough switch to the greedy policy (set <em>ε</em> to 0). What is the difference with Sarsa? You can try different values of <em>ε</em>.</p>
<div>
<iframe src="https://charlycst.github.io/mario_rl/cliff" width="100%" height="400px" scrolling="no" onload="resizeIframe(this)"></iframe>
</div>
<p>One big question remains: when to use Sarsa over Q-Learning or Q-Learning over Sarsa?</p>
<p>With Q-Learning the agent takes more risks, but learns an overall better policy. If you are creating an IA to beat a game with the higher possible score, go for Q-Learning and switch for greedy policy once the agent is trained.</p>
<p>Sarsa is a safer approach, it learns optimal Q-Values knowing that the agent can make mistakes. With Sarsa the agent will take much fewer risks during training, it is a good choice for online training in customer facing application for instance. Sarsa is also more suited for always-learning algorithms, because you can stick with a policy that allows exploration and still have good performances (which is not what is optimized with Q-Learning!).</p>
<h2 id="real-world-applications">Real world applications</h2>
<p>Maybe you are starting to get a bit bored watching Mario searching for blocks, but don&rsquo;t worry I have got your back: now is the time to discuss other, more practical applications.</p>
<p>We will study two use cases: playing Super Marios Bros (oops Mario again, sorry I couldn&rsquo;t resist the temptation) and deciding of the best moment to prompt a user to take an action, say buy a coffee.</p>
<p>My goal in this section is to give you a feel of what is actually feasible, what is not and how to tackle a given tasks in the light of what we discussed in this post. Sadly it seems to me that this part is missing in a lot of posts on reinforcement learning, I hope you will find it useful and that it will inspire you to put some RL in your own applications!</p>
<h3 id="super-mario-bros">Super Mario Bros</h3>
<p>Let&rsquo;s start with the hardest task first: we want to train an agent to play Super Mario Bros, the agent should be able to complete as many levels as possible.</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/marioBros.png"  alt="Super Mario Bros 3"   class="rounded"/>

        
            <figcaption class="center" >Super Mario Bros 3</figcaption>
        
    </figure>


<p>To apply Sarsa or Q-Learning we first have to decide on two things: what are the actions and what are the states?</p>
<p>Regarding actions, the game uses 3 directions (UP does nothing) and 2 buttons <em>A</em> and <em>B</em>. At given time you can press either zero or one direction, and either no action button, only <em>A</em>, only <em>B</em> or <em>A</em> and <em>B</em>. That is a total of 16 distinct actions to choose from.</p>
<p>Note that it is better to keep this number as low as possible: there is in total 64 (6 buttons thus 2⁶) possible actions, but most of them are redundant and thus would increase by a factor of 4 the number of Q-Values our agent needs to learn for nothing in return. This is due to the fact that Sarsa can not generalize what it learns from a given action to others by itself.</p>
<p>Now what about the states? The first level alone is roughly 100 blocks long for 20 blocks high, if we encode the state with the agent position <em>(x, y)</em> that is about 2.000 states, but enemies are moving too! Plus this doesn&rsquo;t generalize to other levels.</p>
<p>Let&rsquo;s try something else, we can discretize the surroundings of Mario and encode only that part of the world:</p>

    <figure class="center" >
        <img src="/img/interactiveIntroductionToRL/marioDiscretized.png"  alt="Discretization of Super Mario Bros 3"   class="rounded"/>

        
    </figure>


<p>Let&rsquo;s say we take a 7*7 square centered around Mario, each block can be either empty, solid (a brick or the ground), an enemy Mario can&rsquo;t jump on (a fire ball, piranha plants), an enemy Mario can jump on (a goomba, a koopa) or Mario itself. Yes you guessed it right, that is already are 5⁴⁹ distinct states with an overly simplified solution. Spoiler alert: it does not fit into memory.</p>
<p>That is the actual limit of Sarsa and Q-Learning: the number of state grows really quickly, often too much to be practical. That is where neural network based algorithms such as <em>Deep Q-Learning</em> &amp; Co shine, but that is a story for another time.</p>
<p>Let&rsquo;s not surrender that easily, I expect the actual distribution of states to be very sparse: that is some of them will appear very often while others will probably never show up. In fact after googling a little while I found a <a href="http://cs229.stanford.edu/proj2012/LiaoYiYang-RLtoPlayMario.pdf">report from a student project</a> that used a similar approach and reported about 20000 states in their final table. That is still a lot but at least if we store only states Mario actually encounters it should be tractable on any modern personal computer.</p>
<p>Ok suppose that we can deal with that many states, should we use Q-learning or Sarsa? We only care about the final score, we are looking for the best possible policy and don&rsquo;t mind the agent&rsquo;s death during training, thus we should be going for Q-learning.</p>
<p>What about rewards? I see two approach here:</p>
<ul>
<li>We can compute the closest distance from the end of the level achieved for the current run and give the agent a reward each time he improves that distance.</li>
<li>We can give the agent a reward when it completes the level. However, the agent is very unlikely to complete the level randomly in the first place, to compensate a good idea is to have the agent start at a random location in the level, this will help it to explore much faster and hopefully it will be able to complete the level a first time when starting close enough of the end.</li>
</ul>
<p>In both case we can give the agent a penalty each time it died.</p>
<h3 id="would-you-like-to-add-a-cup-of-coffee">Would you like to add a cup of coffee?</h3>
<p>Now let&rsquo;s try to do something much more realistic and practical: imagine you run an online store, a blog or a restaurant where customer make orders on a terminal, you probably want don&rsquo;t want your customers/visitors to miss a T-shirt they could like, your future post or the button hidden at the bottom to order a coffee, what about using a prompt?</p>
<p>However, you are probably annoyed by all those prompts everywhere as much as I am. If you don&rsquo;t want to bother your customers too much you can try to predict when the prompt will actually be useful for them and are likely to take the action.</p>
<p>How can we frame this task as a reinforcement learning problem and train an agent to decide when to fire the prompt?</p>
<p>First the actions, there are two of them: fire the prompt or do nothing, easy.</p>
<p>Then the states, let&rsquo;s study two cases, a blog and a restaurant:</p>
<ul>
<li>For you blog you want your visitor to subscribe to your newsletter, what types of visitor usually subscribes? Probably those that spend some time reading your articles, visit many pages and come back. The tuple <em>(reading time, page viewed, number of visits)</em> is probably a good indicator. However, to keep the number of state low it is better to discretize, for instance you can encode reading time by one of:
<ul>
<li>Less than 5 minutes</li>
<li>Between 5 and 10 minutes</li>
<li>between 10 and 30 minutes</li>
<li>between 30 minutes and 1 hour</li>
<li>more than 1 hour</li>
</ul>
</li>
<li>Now you are running a restaurant that boast a choice of 10 starters, 10 main courses and 10 deserts, and you want to propose a coffee while the customer is composing its order. That is a total of 1000 states, if your restaurant is big enough you can cope with that, otherwise consider grouping some meal together.</li>
</ul>
<p>You give a reward to the agent each time he prompt the user and get a positive response, otherwise if the response is negative you give it a penalty.</p>
<p>In this use case you are dealing with real customers, you can&rsquo;t afford the agent to do whatever it wants while learning. In such scenarios it is better to use Sarsa over Q-learning, remember the cliff? Sarsa will play safer.</p>
<p>If you already have data about your customers it is even better: you can pre-train your agent before putting it in front of real people. It may also be reasonable to put hard-coded safeguards, to avoid the agent spamming users for instance.</p>
<p>Hope it gives you some ideas!</p>
<h2 id="conclusion">Conclusion</h2>
<p>And that&rsquo;s it, I know that this a long post, but I really wanted to cover all that material, from a little of theory to practical use cases, to give you a good first picture of reinforcement learning.</p>
<p>Obviously the field of reinforcement learning is much bigger than what I depicted here, we don&rsquo;t even talked about neural networks even though they are powering all current state-of-the-art algorithms such AlphaGo to quote just one.</p>
<p>Anyway I hope you found it interesting, that you&rsquo;ll give a try to RL, and that you will be able to build up on what I shared here.</p>
<p>If you find any mistake don&rsquo;t hesitate to report it <a href="https://github.com/CharlyCst/CharlyCst.github.io/issues">here</a>, otherwise I hope to see you next time!</p>
<div>
<iframe src="https://charlycst.github.io/mario_rl/" width="100%" height="400px" scrolling="no" onload="resizeIframe(this)"></iframe>
</div>
]]></content>
        </item>
        
        <item>
            <title>Diving into Intel MPK</title>
            <link>https://charlycst.github.io/posts/mpk/</link>
            <pubDate>Sat, 29 Feb 2020 12:21:24 +0100</pubDate>
            
            <guid>https://charlycst.github.io/posts/mpk/</guid>
            <description>Memory protection consists in managing access rights of memory pages, either to avoid bugs or preventing malicious behavior. This is usually done through system calls, for instance with mprotect on Linux, because modification of the page table entries requires privileged access. However, in its Skylake architecture, Intel introduced a new way of managing memory permissions directly from userspace using memory protection keys, hence the acronym MPK, let&amp;rsquo;s dive into it!</description>
            <content type="html"><![CDATA[<p>Memory protection consists in managing access rights of memory pages, either to avoid bugs or preventing malicious behavior. This is usually done through system calls, for instance with <code>mprotect</code> on Linux, because modification of the page table entries requires privileged access. However, in its Skylake architecture, Intel introduced a new way of managing memory permissions directly from userspace using <em>memory protection keys</em>, hence the acronym <em>MPK</em>, let&rsquo;s dive into it!</p>
<h2 id="what-is-intel-mpk">What is Intel MPK?</h2>
<p>MPK (also referred as <em>PKU</em> for <em>Protection Keys for Userspace</em>) is a <em>userspace</em> hardware mechanism to control page table permissions, it works by tagging memory pages with protection keys using 4 previously unused bits, in other words we can use up to 16 distinct keys to tag our pages.</p>
<p>Once a page is tagged we can change its protection rights at will, <em>from userspace</em>. But, because updating page table entries (PTE) requires privileged access, a system call is still necessary to tag the pages with a given key in the first place. To allocate and free a key we also need to go through the kernel, on Linux the API is the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">pkey_alloc</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> flags, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> ini_access_rights);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">pkey_free</span>(<span style="color:#66d9ef">int</span> pkey);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">pkey_mprotect</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> start, <span style="color:#66d9ef">size_t</span> len, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> protection, <span style="color:#66d9ef">int</span> pkey);
</span></span></code></pre></div><p><code>pkey_mprotect</code> is analog to the <code>mprotect</code> syscall, but takes an additional argument <em>pkey</em>: a key previously allocated through <code>pkey_alloc</code>. As I mentioned before there is only 16 keys available (the key 0 being already used as a default to tag newly allocated pages), thus allocation can fail. You can learn more on the Linux API <a href="http://www.man7.org/linux/man-pages/man7/pkeys.7.html">here</a>.</p>
<p>The rights associated with each key are stored inside a new 32 bits register called <code>PKRU</code>, it can be read and written respectively by the new instructions <code>RDPKRU</code> and <code>WRPKRU</code>. According to the <a href="https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf">x86_64 Intel manual</a>, <code>RDPKRU</code> and <code>WRPKRU</code> can be used as follows:</p>
<ul>
<li><strong>WRPKRU</strong>: Writes the value of <code>EAX</code> inside <code>PKRU</code>, <code>ECX</code> and <code>EDX</code> must contain 0 when executed.</li>
<li><strong>RDPKRU</strong>: Writes the value of <code>PKRU</code> inside <code>EAX</code> and clears <code>EDX</code>, <code>ECX</code> must contain 0 when executed.</li>
</ul>
<p>For a key i ∊ ⟦0; 15⟧ the bit 2i of the PKRU block any data read or write if set to 1 (it is called access disable bit, or AD) and the bit 2i+1 disable only write (called write disable bit, WD). Thus, we can both read and write if the two bits (WD, AD) are set to (0, 0), only read with (1, 0) and have no access with (0, 1) or (1, 1).</p>

    <figure class="center" >
        <img src="/img/mpk/pkru.png"  alt="8 first bits of PKRU"   class="rounded"/>

        
    </figure>


<p>Of course, it is not possible to override page table protections, thus the actual protection is the intersection of page table and key protections. For instance if the process is only allowed to read a page but the <code>PKRU</code> doesn&rsquo;t restrict write, any attempt to write on that page will still rise an error.</p>
<p>Note that because <code>PKRU</code> is a register, <strong>this permission system is inherently thread local</strong>, that is two threads can have different access rights for the same page depending on the value of <code>PKRU</code> for each thread. This is very different from <code>mprotect</code> which affect all the threads of a process. If you want to keep the same behavior as <code>mprotect</code>, threads need to synchronize the value of their <code>PKRU</code> registers.</p>
<h2 id="some-specificities">Some specificities</h2>
<p>As you can imagine, there are some rather exiting use cases for this new mechanism:</p>
<p>First, with MPK the protection is thread local, wheras <code>mprotect</code> affect the whole process. This makes design patterns such a one writter for <em>N</em> readers trivial to set up: just allocate a single key, tag your pages with that key using  <code>pkey_mprotect</code> and disable write for all reader threads by updating their PKRU. This way any attempt to modify the pages by the readers will raise an exception, reducing the attack surface and preventing a whole class of bugs.</p>
<p>Secondly, updating the <code>PKRU</code> is much faster than a call to <code>mprotect</code>. According to the benchmark presented in the <a href="https://arxiv.org/pdf/1811.07276v1.pdf"><em>libmpk</em> paper</a>, writing to <code>PKRU</code> using <code>WRPKRU</code> takes around 20 CPU cycles, comparable to a mispredicted if branch, against more than a 1000 cycles for the <code>mprotect</code> syscall on a single memory page. MPK is 50 times faster! But there is more: because <code>mprotect</code> actually modify the PTE, it runs in linear time with respect to the number of memory pages, whereas with MPK you have to pay this price once to tag pages with a key, and then updating access rights runs in constant time!</p>
<p>Obviously there are limitations, starting with the number of keys: 16. I also mentioned the need for synchronization in order to coordinate <code>PKRU</code> registers among threads, because of this MPK can not be used as a drop-in replacement for <code>mprotect</code>, even though the <a href="https://arxiv.org/pdf/1811.07276v1.pdf"><em>libmpk</em> paper</a> propose a software abstraction on top of MPK to achieve this goal. The paper also higlight the <em>protection-key-use-after-free</em> issue, which arises when reallocating a key because <code>pkey_free</code> does not clear page table entries, in other words some pages may have undesired restricted access rights.</p>
<h2 id="using-mpk">Using MPK</h2>
<p>Well, this is all very interesting, what about giving it a try?</p>
<p>I&rsquo;m going to present a small wrapper module in Go, however I must warn you that using MPK in Go is probably a bad idea because:</p>
<ul>
<li>You don&rsquo;t have control over the memory layout.</li>
<li>The runtime might try to access protected pages.</li>
<li>You have no control over the thread your code is running on.</li>
</ul>
<p>This is also valid for most high level languages, keep that in mind. However, my code was designed to be used inside the runtime itself, and thus it is possible to address all those issues.</p>
<p>At the time of writing, MPK is not yet widely available, I used an AWS EC2 c5.large instance to run the following code.</p>
<h3 id="syscalls">Syscalls</h3>
<p>Let&rsquo;s start with the 3 system calls, unfortunately I couldn&rsquo;t find them in the <code>sys/unix</code> module, so let&rsquo;s just use the Syscall functions from <code>syscall</code> module:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Syscall</span>(<span style="color:#a6e22e">trap</span>, <span style="color:#a6e22e">a1</span>, <span style="color:#a6e22e">a2</span>, <span style="color:#a6e22e">a3</span> <span style="color:#66d9ef">uintptr</span>) (<span style="color:#a6e22e">r1</span>, <span style="color:#a6e22e">r2</span> <span style="color:#66d9ef">uintptr</span>, <span style="color:#a6e22e">err</span> <span style="color:#a6e22e">Errno</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Syscall6</span>(<span style="color:#a6e22e">trap</span>, <span style="color:#a6e22e">a1</span>, <span style="color:#a6e22e">a2</span>, <span style="color:#a6e22e">a3</span>, <span style="color:#a6e22e">a4</span>, <span style="color:#a6e22e">a5</span>, <span style="color:#a6e22e">a6</span> <span style="color:#66d9ef">uintptr</span>) (<span style="color:#a6e22e">r1</span>, <span style="color:#a6e22e">r2</span> <span style="color:#66d9ef">uintptr</span>, <span style="color:#a6e22e">err</span> <span style="color:#a6e22e">Errno</span>)
</span></span></code></pre></div><p>The <em>trap</em> parameter is the syscall signal number, we are interested in those:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">sysPkeyMprotect</span> = <span style="color:#ae81ff">329</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">sysPkeyAlloc</span>    = <span style="color:#ae81ff">330</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">sysPkeyFree</span>     = <span style="color:#ae81ff">331</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>While <em>a1, a2, a3</em> are the arguments passed to the system call. Because <code>mpkey_mprotect</code> requires 4 arguments we will also need <code>Syscall6</code>, which is the same as <code>Syscall</code> with 3 extra arguments.</p>
<p>With a little help from the <a href="http://man7.org/linux/man-pages/man7/pkeys.7.html">linux doc</a>, it&rsquo;s quite easy to write go wrapper.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Pkey</span>    <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Prot</span>    <span style="color:#66d9ef">uint32</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">SysProt</span> <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// PkeyAlloc allocates a new pkey
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">PkeyAlloc</span>() (<span style="color:#a6e22e">Pkey</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">pkey</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">Syscall</span>(<span style="color:#a6e22e">sysPkeyAlloc</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> int(<span style="color:#a6e22e">pkey</span>) &lt; <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Pkey</span>(<span style="color:#a6e22e">pkey</span>), <span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">New</span>(<span style="color:#e6db74">&#34;Failled to allocate pkey&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Pkey</span>(<span style="color:#a6e22e">pkey</span>), <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// PkeyFree frees a pkey previously allocated
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">PkeyFree</span>(<span style="color:#a6e22e">pkey</span> <span style="color:#a6e22e">Pkey</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">result</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">Syscall</span>(<span style="color:#a6e22e">sysPkeyFree</span>, uintptr(<span style="color:#a6e22e">pkey</span>), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">New</span>(<span style="color:#e6db74">&#34;Could not free pkey&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// PkeyMprotect tags pages within [addr, addr + len -1] with the given pkey.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Permission on page table can also be updated at the same time.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Note that addr must be aligned to a page boundary.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">PkeyMprotect</span>(<span style="color:#a6e22e">addr</span> <span style="color:#66d9ef">uintptr</span>, <span style="color:#a6e22e">len</span> <span style="color:#66d9ef">uint64</span>, <span style="color:#a6e22e">sysProt</span> <span style="color:#a6e22e">SysProt</span>, <span style="color:#a6e22e">pkey</span> <span style="color:#a6e22e">Pkey</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">result</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">Syscall6</span>(<span style="color:#a6e22e">sysPkeyMprotect</span>, <span style="color:#a6e22e">addr</span>, uintptr(<span style="color:#a6e22e">len</span>), uintptr(<span style="color:#a6e22e">sysProt</span>), uintptr(<span style="color:#a6e22e">pkey</span>), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">New</span>(<span style="color:#e6db74">&#34;Could not update memory access rights&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="messing-up-with-pkru">Messing up with PKRU</h3>
<p>System calls are cool, but what is even cooler is to stay in userspace. Now we need to update the <code>PKRU</code> register, there are two amd64 instructions for that, let&rsquo;s roll up our sleeves and write some assembly!</p>
<p>First we define the function signature in plain go:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">PKRU</span> <span style="color:#66d9ef">uint32</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">WritePKRU</span>(<span style="color:#a6e22e">prot</span> <span style="color:#a6e22e">PKRU</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ReadPKRU</span>() <span style="color:#a6e22e">PKRU</span>
</span></span></code></pre></div><p>And then we have to write some assembly. Recall that we need to set <code>ECX</code> and <code>EDX</code> to zero before calling <code>WRPKRU</code>, while <code>RDPKRU</code> only requires to set <code>ECX</code> to zero.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">TEXT</span> <span style="color:#960050;background-color:#1e0010">·</span><span style="color:#a6e22e">WritePKRU</span>(<span style="color:#a6e22e">SB</span>),<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">MOVQ</span> <span style="color:#a6e22e">prot</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0</span>(<span style="color:#a6e22e">FP</span>), <span style="color:#a6e22e">AX</span> <span style="color:#75715e">// Mov the argument to AX
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">XORQ</span> <span style="color:#a6e22e">CX</span>, <span style="color:#a6e22e">CX</span>         <span style="color:#75715e">// Set CX to 0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">XORQ</span> <span style="color:#a6e22e">DX</span>, <span style="color:#a6e22e">DX</span>
</span></span><span style="display:flex;"><span>   	<span style="color:#a6e22e">WRPKRU</span>              <span style="color:#75715e">// Write AX to PKRU
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">RET</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">TEXT</span> <span style="color:#960050;background-color:#1e0010">·</span><span style="color:#a6e22e">ReadPKRU</span>(<span style="color:#a6e22e">SB</span>),<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">XORQ</span> <span style="color:#a6e22e">CX</span>, <span style="color:#a6e22e">CX</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">RDPKRU</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">MOVQ</span> <span style="color:#a6e22e">AX</span>, <span style="color:#a6e22e">ret</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0</span>(<span style="color:#a6e22e">FP</span>)  <span style="color:#75715e">// Mov AX to the address of returned value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">RET</span>
</span></span></code></pre></div><p>And that is it! We have got everything we need to start using MPK in Go. I don&rsquo;t really want to manipulate bits to update rights of each key, however. Let&rsquo;s make our life simpler and write a short helper function.</p>
<p>There are three possible protections for each key:</p>
<ul>
<li>RWX when the two bits are set to 0</li>
<li>RX when write is disabled (bit 2i+1 set to 1)</li>
<li>X when all access are disabled (bit 2i set to 1)</li>
</ul>
<p>We can manipulate these protections by defining some constants to represent the corresponding bits:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ProtRWX</span> <span style="color:#a6e22e">Prot</span> = <span style="color:#ae81ff">0b00</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ProtRX</span>  <span style="color:#a6e22e">Prot</span> = <span style="color:#ae81ff">0b10</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ProtX</span>   <span style="color:#a6e22e">Prot</span> = <span style="color:#ae81ff">0b11</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>We often want to update the permission for only one key at a time. We can easily do that by setting the two bits corresponding to that key to 0, and then setting them to the value corresponding to the desired protection.</p>
<p>Let&rsquo;s say we want to set protection of key i to RX, first we create a mask full of one except for bit 2i and 2i + 1, apply it to the pkru value with a bitwise and <code>&amp;</code>, then shift the protection bits (1, 0) by 2i bits to the left and add them to the pkru.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">mask</span> <span style="color:#66d9ef">uint32</span> = <span style="color:#ae81ff">0xfffffff</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">PKRU</span>) <span style="color:#a6e22e">Update</span>(<span style="color:#a6e22e">pkey</span> <span style="color:#a6e22e">Pkey</span>, <span style="color:#a6e22e">prot</span> <span style="color:#a6e22e">Prot</span>) <span style="color:#a6e22e">PKRU</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">pkeyMask</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mask</span> <span style="color:#f92672">-</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">pkey</span>)) <span style="color:#f92672">-</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> (<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span><span style="color:#a6e22e">pkey</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">pkru</span> <span style="color:#f92672">:=</span> uint32(<span style="color:#a6e22e">p</span>) <span style="color:#f92672">&amp;</span> <span style="color:#a6e22e">pkeyMask</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">pkru</span> <span style="color:#f92672">+=</span> uint32(<span style="color:#a6e22e">prot</span>) <span style="color:#f92672">&lt;&lt;</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">pkey</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">PKRU</span>(<span style="color:#a6e22e">pkru</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="using-mpk-for-real">Using MPK, for real</h3>
<p>Time to do a demo! As I said before, using MPK in Go is usually a bad idea, yet let&rsquo;s try to do it anyway.</p>
<p>First we want to allocate something on its own page, we can allocate a huge array and hope that the runtime will allocates a few new pages to store it. Then we allocate a key with our brand new MPK module and tag the page containing the first item of the array with that key.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Allocate an array
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">a</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Allocate a key
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">pkey</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mpk</span>.<span style="color:#a6e22e">PkeyAlloc</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">check</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Tag the page containing `a[0]` with our key
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">mpk</span>.<span style="color:#a6e22e">PkeyMprotect</span>(
</span></span><span style="display:flex;"><span>	(uintptr(<span style="color:#a6e22e">unsafe</span>.<span style="color:#a6e22e">Pointer</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>]))<span style="color:#f92672">&gt;&gt;</span><span style="color:#ae81ff">12</span>)<span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">12</span>, <span style="color:#75715e">// Align pointer to page
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#ae81ff">1</span><span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">12</span>,          <span style="color:#75715e">// Page size
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">mpk</span>.<span style="color:#a6e22e">SysProtRWX</span>, <span style="color:#75715e">// Base protection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">pkey</span>,           <span style="color:#75715e">// Key
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>)
</span></span></code></pre></div><p>When calling <code>pkey_mprotect</code>, we need to ensure that the pointer we pass as argument is aligned with a page boundary. One way to do it is to shift the pointer to the right by 12 bits (the page size is 4096 = 2¹² on my system) and then back to the left by 12 bits.</p>
<p>We then check that we can still read and write the first item of our array, it should be the case because we didn&rsquo;t update the value of <code>PKRU</code> yet.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Memory address of a[0]:  %p\n&#34;</span>, <span style="color:#a6e22e">a</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;The value inside a[0]:  &#34;</span>, <span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>] = <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Now let&rsquo;s update the value of <code>PKRU</code> to remove write access</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">pkru</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mpk</span>.<span style="color:#a6e22e">AllRightsPKRU</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pkru</span> = <span style="color:#a6e22e">pkru</span>.<span style="color:#a6e22e">Update</span>(<span style="color:#a6e22e">pkey</span>, <span style="color:#a6e22e">mpk</span>.<span style="color:#a6e22e">ProtRX</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mpk</span>.<span style="color:#a6e22e">WritePKRU</span>(<span style="color:#a6e22e">pkru</span>)
</span></span></code></pre></div><p>We should still be able to read</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;The value inside a[0]:  &#34;</span>, <span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>])
</span></span></code></pre></div><p>However, the next write will rise an error</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>] = <span style="color:#ae81ff">2</span>
</span></span></code></pre></div><p>here is the output I got:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Memory address of a<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>:  0xc00007a000
</span></span><span style="display:flex;"><span>The value inside a<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>:   <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>The value inside a<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>:   <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>unexpected fault address 0xc00007a000
</span></span><span style="display:flex;"><span>fatal error: fault
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>signal SIGSEGV: segmentation violation code<span style="color:#f92672">=</span>0x4 addr<span style="color:#f92672">=</span>0xc00007a000 pc<span style="color:#f92672">=</span>0x48ef69<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>As expected, the execution triggered a segfault on the second write, after having removed write permission. We can check the error code (4) to verify the cause of the error, for instance in <a href="https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/siginfo.h">singinfo.h</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * SIGSEGV si_codes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define SEGV_MAPERR	1	</span><span style="color:#75715e">/* address not mapped to object */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define SEGV_ACCERR	2	</span><span style="color:#75715e">/* invalid permissions for mapped object */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define SEGV_BNDERR	3	</span><span style="color:#75715e">/* failed address bound checks */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define SEGV_PKUERR	4	</span><span style="color:#75715e">/* failed protection key checks */</span><span style="color:#75715e">
</span></span></span></code></pre></div><p>It is indeed because the protection key check failed 🎉</p>
<h2 id="conclusion">Conclusion</h2>
<p>It is already the end of this post, I hope you enjoyed it and learned a few things about Intel MPK!</p>
<p>Here is a short recap of the key ideas:</p>
<ul>
<li>Intel MPK is a userspace mechanism for memory permission management.</li>
<li>It is much cheaper than <code>mprotect</code> in CPU cycles.</li>
<li>You can have only 16 keys, thus you can control at most 16 groups of pages simultaneously.</li>
<li>It is thread bases, because the permissions are stored inside a new register <code>PKRU</code>. It can be an asset or a drawback depending on your application.</li>
</ul>
<p>If you want to have a closer look, you can find the code of my MPK wrapper on <a href="https://github.com/CharlyCst/mpk">github</a>.</p>
<p>If you liked this post and want support me or be alerted when I publish a new one, you can follow me on <a href="https://twitter.com/CharlyCastes">twitter</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Speeding up pattern matching with WebAssembly</title>
            <link>https://charlycst.github.io/posts/speeding-up-pattern-matching/</link>
            <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
            
            <guid>https://charlycst.github.io/posts/speeding-up-pattern-matching/</guid>
            <description>I while ago I was tasked to find predefined patterns in strings, a well known problem in computer science. Our algorithm was running on AWS Lambda using the Node.js runtime, and, considering that we sometimes needed to search through billions of strings, performances of this algorithm were crucial.
On the other hand I recently paid a lot of attention to WebAssembly and Rust, both technologies seem really promising and attract a growing interest from developers.</description>
            <content type="html"><![CDATA[<p>I while ago I was tasked to find predefined patterns in strings, a well known problem in computer science. Our algorithm was running on AWS Lambda using the Node.js runtime, and, considering that we sometimes needed to search through billions of strings, performances of this algorithm were crucial.</p>
<p>On the other hand I recently paid a lot of attention to WebAssembly and Rust, both technologies seem really promising and attract a growing interest from developers. After reading a few articles on performance improvement using Wasm (the acronym for WebAssembly), I decided to give it a try: could it speed up my Lambda function?</p>
<h2 id="pattern-matching">Pattern matching</h2>
<p>Before even talking about WebAssembly, let&rsquo;s dig a bit into the pattern searching problem: We are given a set of patterns and a string, and the goal is to find all patterns that appear in the string.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#75715e">// Patterns
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[<span style="color:#e6db74">&#34;Charizard&#34;</span>, <span style="color:#e6db74">&#34;Magikarp&#34;</span>, <span style="color:#e6db74">&#34;Splash&#34;</span>, <span style="color:#e6db74">&#34;Flamethrower&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// The string
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;Magikarp used Splash! But nothing happened.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* ^^^^^^^^      ^^^^^^                        */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Output
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[<span style="color:#e6db74">&#34;Magikarp&#34;</span>, <span style="color:#e6db74">&#34;Splash&#34;</span>]
</span></span></code></pre></div><p>When looking for only one pattern the problem is simple: go through the string character per character and if the current one matches the first character of the pattern, then we compare the next caracter to the second of the pattern and so on. This can be represented using an automaton:</p>

    <figure class="center" >
        <img src="/img/speedingUpPatternMatching/linearAutomaton.png"  alt="A linear automaton"   class="rounded"/>

        
    </figure>


<p>Regular expressions (regexes) are an extension of this algorithm, where the automaton can be more evolved:</p>

    <figure class="center" >
        <img src="/img/speedingUpPatternMatching/regex.png"  alt="Example of regex"   class="rounded"/>

        
    </figure>


<p>In the example above, the regex is equivalent to searching for both patterns &ldquo;charmander&rdquo; and &ldquo;charizard&rdquo;. Of course, regexes are very expressive and can match much more complex patterns, but in this article we are only interested in plain text patterns.</p>
<p>Trying to write a single regex to match a thousand patterns or using a thousand regexes is probably not a good idea, however. For those use cases there is another algorithm much more effective called <a href="https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm">Aho-Corasick</a>.</p>
<p>The idea is to build a deterministic finite automaton (meaning that there is always exactly one possibility when transitioning from one state to another) that takes advantages of common suffixes and prefixes.</p>
<p>The Aho-Corasick algorithm uses a &lsquo;failure function&rsquo;: for a given state if no transition corresponds to the next character, the failure function kicks in and tell us which is the next state.</p>

    <figure class="center" >
        <img src="/img/speedingUpPatternMatching/automaton.png"  alt="Example of Aho-Corasick failure function"   class="rounded"/>

        
    </figure>


<p>For instance in the above example, after recognizing <code>lapra</code> of <code>lapras</code>, if the next character is not an <code>s</code>, then no need to go back and try other branches of the automaton: the failure function tells us that we can continue from the first <code>a</code> state of <code>rapidash</code>. Again if the next character is not a <code>p</code>, we can continue from <code>a</code> state of <code>articuno</code> and so on.</p>
<p>If you are interested in how to build the automaton, you can find a commented implementation in C++ <a href="https://www.geeksforgeeks.org/aho-corasick-algorithm-pattern-searching/">here</a>. If you prefer Rust, I wrote a (less commented) <a href="https://github.com/CharlyCst/fast-match/blob/master/src/lib.rs">Rust version</a> for the sake of this experiment.</p>
<p>From a practical point of view, the Aho-Corasick algorithm consist in two phases:</p>
<ul>
<li>Building the automaton: in linear time, performances of this step are not critical and building time will be neglected by comparison to the execution step.</li>
<li>Executing the automaton: this is the phase I&rsquo;m interested in, it is mainly about look up into the transition and failure function tables built at the previous step.</li>
</ul>
<p>What is interesting is that this task does not involve heavy computation as graphic or cryptography may require, which would be the type of tasks that make WebAssembly shine: still, can Wasm speed-up pattern matching?</p>
<h2 id="speeding-things-up">Speeding things up</h2>
<p>Now that we are up to date with the algorithm, <a href="https://www.npmjs.com/package/ahocorasick">here</a> is a good JavaScript implementation that I used as reference. The plan was to write a Rust version, compile it to Wasm and check if it is faster.</p>
<p>In order to compare performances I needed to create a benchmark. I picked a little over 8,000 distinct random words from <a href="https://en.wikipedia.org/wiki/Les_Mis%C3%A9rables">Les Misérables</a>, a 68,000 lines long novel by <a href="https://en.wikipedia.org/wiki/Victor_Hugo">Victor Hugo</a>. The task is to find all occurrences of these 8,000 words in the whole novel.</p>
<h3 id="a-failed-attempt">A failed attempt</h3>
<p>I wrote a first version of Aho-Corasick in Rust using <a href="https://github.com/rustwasm/wasm-bindgen">wasm-bindgen</a> to generate glue code between JavaScript and WebAssembly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[wasm_bindgen]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Matcher</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[wasm_bindgen]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> Matcher {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">new</span>(words: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">js_sys</span>::Array) -&gt; <span style="color:#a6e22e">Matcher</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">run</span>(<span style="color:#f92672">&amp;</span>self, string: String) -&gt; <span style="color:#a6e22e">js_sys</span>::Array {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I built a release build targeting Node.js</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wasm-pack build --release --target nodejs
</span></span></code></pre></div><p>Then timed both je JavaScript and WebAssembly version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>time NODE_ENV<span style="color:#f92672">=</span>production node wasm.js
</span></span><span style="display:flex;"><span>time NODE_ENV<span style="color:#f92672">=</span>production node js.js
</span></span></code></pre></div><p>And surprise:</p>

    <figure class="center" >
        <img src="/img/speedingUpPatternMatching/firstComparison.png"  alt="JS vs Wasm execution time"   class="rounded"/>

        
    </figure>


<p>It turned out that my Wasm version was 5 times slower. I sort of knew that I should have expected that, but still, I was somewhat disappointed.</p>
<p>Before jumping on any conclusions it is often a good idea to check what really happens under the hood: V8 (and thus Node.js) has some good profiling tools built in, you can use them as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># pass the `prof` option to Node.js</span>
</span></span><span style="display:flex;"><span>node --prof wasm.js
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This will generate a .log file, in my case isolate-0x49a1aa0-11836-v8.log</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This file can be used to generate a profile:</span>
</span></span><span style="display:flex;"><span>node --prof-process isolate-0x49a1aa0-11836-v8.log
</span></span></code></pre></div><p>Here is the summary for the JavaScript version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> <span style="color:#f92672">[</span>Summary<span style="color:#f92672">]</span>:
</span></span><span style="display:flex;"><span>   ticks  total  nonlib   name
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">2236</span>   41.2%   95.6%  JavaScript
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">103</span>    1.9%    4.4%  C++
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">59</span>    1.1%    2.5%  GC
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">3082</span>   56.9%          Shared libraries
</span></span></code></pre></div><p>And the Wasm version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> <span style="color:#f92672">[</span>Summary<span style="color:#f92672">]</span>:
</span></span><span style="display:flex;"><span>   ticks  total  nonlib   name
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">5949</span>   20.2%   37.0%  JavaScript
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">9405</span>   32.0%   58.5%  C++
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">1554</span>    5.3%    9.7%  GC
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">13326</span>   45.3%          Shared libraries
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">712</span>    2.4%          Unaccounted
</span></span></code></pre></div><p>The JavaScript row accounts for both JavaScript and WebAssembly code, while Shared libraries accounts mostly for Node.js built-in functions.</p>
<p>Something clearly goes wrong with my Wasm version: 32% of execution time is spent on C++ while it is only accounting for 1.9% in the JS version. You can also notice that the garbage collector (GC) is doing five time more work in Wasm that in JS.</p>
<p>Let&rsquo;s take a closer look at those categories in the case of Wasm:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> <span style="color:#f92672">[</span>JavaScript<span style="color:#f92672">]</span>:
</span></span><span style="display:flex;"><span>   ticks  total  nonlib   name
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">3166</span>   10.8%   19.7%  Function: *fast_match::Matcher::run::hdc325dfd51ff7151
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">846</span>    2.9%    5.3%  LazyCompile: *module.exports.__wbindgen_string_new /home/gripsou/Documents/projects/fast-match/pkg/fast_match.js:135:48
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">687</span>    2.3%    4.3%  Function: *&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref::h598faf2834c73f9f
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">183</span>    0.6%    1.1%  LazyCompile: *getEncodingOps buffer.js:644:24
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">158</span>    0.5%    1.0%  LazyCompile: *&lt;anonymous&gt; /home/gripsou/Documents/projects/fast-match/node/asm.js:9:49
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">149</span>    0.5%    0.9%  Function: *js_sys::Array::push::h20c97c9f2647281f
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">148</span>    0.5%    0.9%  LazyCompile: *module.exports.__wbg_push_446cc0334a2426e8 /home/gripsou/Documents/projects/fast-match/pkg/fast_match.js:176:54
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">107</span>    0.4%    0.7%  LazyCompile: *module.exports.__wbindgen_object_drop_ref /home/gripsou/Documents/projects/fast-match/pkg/fast_match.js:131:53
</span></span><span style="display:flex;"><span>    ...
</span></span></code></pre></div><p>Most of the time spent executing my code is spent inside my Wasm <code>run</code> function responsible for executing the automaton, that&rsquo;s a good thing. Then comes the glue code generated by wasm-bindgen, it&rsquo;s JavaScript code. As indicated by the <code>LazyCompile</code> name, Node tried to compile our JS and succeeded (there is a <code>*</code>, if the code was interpreted we would have seen a <code>~</code>), so our JavaScript is fast too.</p>
<p>Up to this point things looks good, let&rsquo;s take a look at the C++:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> <span style="color:#f92672">[</span>C++<span style="color:#f92672">]</span>:
</span></span><span style="display:flex;"><span>   ticks  total  nonlib   name
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">749</span>    2.5%    4.7%  _int_malloc
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">673</span>    2.3%    4.2%  __GI___libc_malloc
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">532</span>    1.8%    3.3%  __GI___pthread_mutex_lock
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">513</span>    1.7%    3.2%  node::i18n::<span style="color:#f92672">(</span>anonymous namespace<span style="color:#f92672">)</span>::ConverterObject::Decode<span style="color:#f92672">(</span>v8::FunctionCallbackInfo&lt;v8::Value&gt; const&amp;<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">481</span>    1.6%    3.0%  v8::internal::PrototypeIterator::Advance<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">385</span>    1.3%    2.4%  __pthread_mutex_unlock_usercnt
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">344</span>    1.2%    2.1%  node::Buffer::Copy<span style="color:#f92672">(</span>node::Environment*, char const*, unsigned long<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">332</span>    1.1%    2.1%  v8::Object::SetPrototype<span style="color:#f92672">(</span>v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">319</span>    1.1%    2.0%  void node::Buffer::<span style="color:#f92672">(</span>anonymous namespace<span style="color:#f92672">)</span>::StringSlice&lt;<span style="color:#f92672">(</span>node::encoding<span style="color:#f92672">)</span>3&gt;<span style="color:#f92672">(</span>v8::FunctionCallbackInfo&lt;v8::Value&gt; const&amp;<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">285</span>    1.0%    1.8%  v8::ArrayBuffer::GetContents<span style="color:#f92672">()</span>
</span></span></code></pre></div><p>The two first items are related to memory allocation, we also spot a buffer copy operation and some encode and decode primitives. So here we are: I was copying things in memory between JavaScript and Wasm. Note this can also explain the higher load on the GC we noticed earlier.</p>
<p>And here is the culprit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Rust" data-lang="Rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">run</span>(<span style="color:#f92672">&amp;</span>self, string: String) -&gt; <span style="color:#a6e22e">js_sys</span>::Array {
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>My interface between JavaScript and WebAssembly was using Rust strings, when reading <a href="https://rustwasm.github.io/docs/wasm-bindgen/reference/types/str.html">wasm-bindgen doc</a>, we can learn that not only strings are copied back and forth between JS and Wasm, but also that JavaScript is using UTF-16 and Rust UTF-8, meaning that there is an additional conversion overhead.</p>
<h2 id="fixing-things-up">Fixing things up</h2>
<p>In fact, I was aware of these copies between JavaScript and WebAssembly, but did it purposefully because I used to think that back and forth between JS and Wasm were slow, <a href="https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast-%F0%9F%8E%89/">turns out that is not the case</a>.</p>
<p>What this all means is that in this case it is much better to work with JavaScript values from Rust, the <a href="https://rustwasm.github.io/wasm-bindgen/api/js_sys/index.html"><code>js-sys</code> crate</a> exposes everything that is needed for that: we can accept JavaScript string (that is a pointer to the memory hosting the string in the JS heap, no copy) and iterate over it, each character is represented by a <code>u16</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Rust" data-lang="Rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">run</span>(<span style="color:#f92672">&amp;</span>self, string: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">js_sys</span>::JsString) -&gt; <span style="color:#a6e22e">js_sys</span>::Array {
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> c <span style="color:#66d9ef">in</span> string.iter() {
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">..</span>.
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s check the performances again:</p>

    <figure class="center" >
        <img src="/img/speedingUpPatternMatching/secondComparison.png"  alt="JS vs Wasm execution time"   class="rounded"/>

        
    </figure>


<p>Yep, this time it is faster! It&rsquo;s quite impressive considering that with today&rsquo;s engines JavaScript is already really fast once JIT compiled.</p>
<p>Let&rsquo;s take a look at the profile to check if we fixed things up:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> <span style="color:#f92672">[</span>Summary<span style="color:#f92672">]</span>:
</span></span><span style="display:flex;"><span>   ticks  total  nonlib   name
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">8249</span>   84.7%   89.5%  JavaScript
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">89</span>    0.9%    1.0%  C++
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">39</span>    0.4%    0.4%  GC
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">529</span>    5.4%          Shared libraries
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">874</span>    9.0%          Unaccounted
</span></span></code></pre></div><p>That is indeed much, much better: C++ code went down from 32% to 0.9% of execution time, now Node is truly spending most of its time actually executing our JS and Wasm code! Notice that the GC has also much less work to do, even less that in the pure JS version.</p>
<p>To put things in perspective, here is a visual recap of the old and new version profiles side to side:</p>

    <figure class="center" >
        <img src="/img/speedingUpPatternMatching/profiling.png"  alt="final comparison"   class="rounded"/>

        
    </figure>


<h2 id="conclusion">Conclusion</h2>
<p>I hope you found this post interesting, if you have to remember anything from it here are some key takeaways:</p>
<ul>
<li>Wasm can indeed speed up your code, but it must be handled carefully: pay extra attention to your interfaces with JavaScript, especially if you are passing data around.</li>
<li>A profiler can help to find what is wrong with your code or confirm your hypothesis.</li>
<li>JavaScript is already fast, <a href="https://mrale.ph/blog/2018/02/03/maybe-you-dont-need-rust-to-speed-up-your-js.html">maybe you don&rsquo;t need Wasm to speed up your JS</a>. For similar tasks you should not expect an order of magnitude improvement by using Wasm instead of JS.</li>
</ul>
<p>To conclude here is a visual summary of the achieved results:</p>

    <figure class="center" >
        <img src="/img/speedingUpPatternMatching/finalComparison.png"  alt="final comparison"   class="rounded"/>

        
    </figure>


<p>So here is the answer: Yes, once done correctly, replacing JS with Wasm can speed up my lambda function by factor of almost 2. It is now up to you to decide whether it is worth introducing Wasm into your project, considering the task you are trying to solve.</p>
]]></content>
        </item>
        
        <item>
            <title>Let&#39;s (re)code React</title>
            <link>https://charlycst.github.io/posts/micro-react/</link>
            <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://charlycst.github.io/posts/micro-react/</guid>
            <description>With more than 140k stars on Github at the time of writing, React is arguably one of the most used and loved web framework, but did you ever asked yourself how it works under the hood? Well you may know that there is this virtual DOM thing, and a certain reconciliation algorithm, but how do they work exactly? The best way to find out is probably to (re)code React by ourselves, let&amp;rsquo;s get started!</description>
            <content type="html"><![CDATA[<p>With more than 140k stars on Github at the time of writing, React is arguably one of the most used and loved web framework, but did you ever asked yourself how it works under the hood? Well you may know that there is this virtual DOM thing, and a certain reconciliation algorithm, but how do they work exactly? The best way to find out is probably to (re)code React by ourselves, let&rsquo;s get started!</p>
<p>But first a quick disclaimer: React is a very mature framework, it&rsquo;s the results of years of research and the actual algorithm is more evolved than the one I&rsquo;m presenting here. The core idea is the same, however, and I will point out differences worth mentioning.</p>
<h2 id="the-virtual-dom">The virtual DOM</h2>
<p>First thing first: let&rsquo;s talk about the DOM. The DOM (or Document Object Model) is a tree structure that represent the web page, it can be created from HTML:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;root&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">h1</span>&gt;Hello, World !&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">p</span>&gt;I&#39;m an HTML page&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>But also through JavaScript, for instance we can update the DOM we created:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">root</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;root&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Set the background color
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">backgroundColor</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;blue&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Add a new element
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">elt</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#34;b&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">elt</span>.<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;I was added dynamically&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">elt</span>);
</span></span></code></pre></div><p>The resulting DOM will be equivalent to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;root&#34;</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;background-color: blue;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">h1</span>&gt;Hello, World !&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">p</span>&gt;I&#39;m an HTML page&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">b</span>&gt;I was added dynamically&lt;/<span style="color:#f92672">b</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>Updating the DOM through JavaScript is the only way to create dynamic web pages, however writing code to perform these updates can quickly become very cumbersome, that&rsquo;s where React comes in.</p>
<p>The idea is that instead of writing imperative code to update the DOM, it would be much easier to write a description of what we want and let our framework figure out which operations to perform. That&rsquo;s what React does, we provide a target DOM and the <em>reconciliation algorithm</em> will perform surgical updates on the real DOM to have it match the target.</p>
<p>The target DOM is called <em>Virtual DOM</em>, it is a simple JavaScript object, meaning that it is lightweight to create, we can update it at will or even throw it away, it will not have any impact on the actual web page.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#75715e">// A virtual node
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;p&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">props</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">children</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;I&#39;m a virtual node!&#34;</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Those virtual nodes are what the virtual DOM is made of. To give a more formal definition, virtual nodes implement this interface:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">VNode</span>&lt;<span style="color:#f92672">P</span> <span style="color:#960050;background-color:#1e0010">=</span> {}&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">type</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">string</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">props</span>: <span style="color:#66d9ef">P</span> <span style="color:#f92672">&amp;</span> { <span style="color:#a6e22e">children</span>: <span style="color:#66d9ef">VNode</span>[] <span style="color:#f92672">|</span> <span style="color:#66d9ef">string</span> };
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The property <code>children</code> is a little special, it represents the children of this node: you can imagine it as the inner HTML which is itself either a string or a list of other HTML elements.</p>
<p>Now the question is how do we create virtual nodes? React exposes a function <code>createElement</code> that do it for us.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">vNode</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#34;h1&#34;</span>, {}, <span style="color:#e6db74">&#34;Hello, World!&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ReactDOM</span>.<span style="color:#a6e22e">render</span>(<span style="color:#a6e22e">vNode</span>, document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;root&#34;</span>));
</span></span></code></pre></div><p>Creating elements with the JavaScript syntax can quickly become burdensome, that is why most of the time we use <a href="https://reactjs.org/docs/introducing-jsx.html">JSX</a>. JSX is just syntactic sugar, it is transpiled to a pure JavaScript equivalent using <code>React.createElement</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#75715e">// Some JSX
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">vNode</span> <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;root&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">h1</span>&gt;<span style="color:#a6e22e">Hello</span>, <span style="color:#a6e22e">World</span><span style="color:#f92672">!</span>&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;<span style="color:#a6e22e">I</span><span style="color:#e6db74">&#39;m a JSX page&lt;/p&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">// It is translated to
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">const vNode = React.createElement(&#34;div&#34;, { id: &#34;root&#34; }, [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  React.createElement(&#34;h1&#34;, null, &#34;Hello, World!&#34;),
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  React.createElement(&#34;p&#34;, null, &#34;I&#39;</span><span style="color:#a6e22e">m</span> <span style="color:#a6e22e">a</span> <span style="color:#a6e22e">JSX</span> <span style="color:#a6e22e">page</span><span style="color:#960050;background-color:#1e0010">&#34;</span>)
</span></span><span style="display:flex;"><span>]);
</span></span></code></pre></div><p>This transpilation step can be performed by tools such as <a href="https://babeljs.io/docs/en/babel-plugin-transform-react-jsx">Babel</a> or <a href="https://www.typescriptlang.org/docs/handbook/jsx.html">Typescript</a>. Fortunately it is possible to pass a custom function to be used instead of <code>React.createElement</code>, all we have to do is to create our own JSX factory.</p>
<p>Now that we learned a little more about the DOM, virtual nodes and JSX we are ready to go, let&rsquo;s code!</p>
<h2 id="virtual-nodes-and-components">Virtual nodes and components</h2>
<p>We will name our framework µReact, it will feature components with the <code>setState</code> and <code>componentDidMound</code> methods as well as full JSX support. You can find the code of this section <a href="https://github.com/CharlyCst/microReact/blob/master/src/%C2%B5React/core.ts">here</a>.</p>
<p>Let&rsquo;s first define our virtual nodes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">VNode</span>&lt;<span style="color:#f92672">P</span> <span style="color:#960050;background-color:#1e0010">=</span> {}&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">type</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">string</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">props</span>: <span style="color:#66d9ef">P</span> <span style="color:#f92672">&amp;</span> { <span style="color:#a6e22e">children</span>: <span style="color:#66d9ef">VNode</span>[] <span style="color:#f92672">|</span> <span style="color:#66d9ef">string</span> };
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">domElt?</span>: <span style="color:#66d9ef">HTMLElement</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span><span style="color:#f92672">?:</span> <span style="color:#66d9ef">new</span> (<span style="color:#a6e22e">props</span>: <span style="color:#66d9ef">P</span>) <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Component</span>&lt;<span style="color:#f92672">P</span>&gt;;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">component?</span>: <span style="color:#66d9ef">Component</span>&lt;<span style="color:#f92672">P</span>&gt;;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We added a few fields:</p>
<ul>
<li><strong>domElt</strong> is a reference to the corresponding DOM element if any. We will set it once we instantiate a real DOM element corresponding to this virtual node.</li>
<li><strong>class</strong> is the constructor of the µReact component, it will be defined when the virtual node correspond to a component and not to a HTML tag.</li>
<li><strong>component</strong> is a reference to the component, if any, once it has been instantiated with the class constructor.</li>
</ul>
<p>Now we are ready to create our JSX factory. There are a few difficulties here: we need to implement the same interface as <code>React.createElement</code>, which accepts quite a lot of different types for its arguments. Let&rsquo;s break it down first:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">createElement</span>(<span style="color:#a6e22e">type</span>, <span style="color:#a6e22e">props</span>, <span style="color:#a6e22e">children</span>);
</span></span></code></pre></div><ul>
<li><strong>type</strong> is either a string corresponding to an HTML element type, such ad <code>&quot;div&quot;</code>, <code>&quot;h1&quot;</code> and so on, or a constructor if the JSX element correspond to a React component (that is it begins with a capital letter, such as &ldquo;App&rdquo;).</li>
<li><strong>props</strong> can be either null or any JavaScript object</li>
<li><strong>children</strong> is more complicated, it can be either a string, a number, another virtual node, a list of any of these types or even a list of list. To keep things simple we will not deal with each corner case, though it will be general enough to create interesting applications.</li>
</ul>
<p>Ok, let&rsquo;s write a function <code>createElement</code> that returns a virtual node:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">createElement</span>&lt;<span style="color:#f92672">P</span> <span style="color:#960050;background-color:#1e0010">=</span> {}&gt;(
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">type</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">string</span> <span style="color:#f92672">|</span> (<span style="color:#66d9ef">new</span> (<span style="color:#a6e22e">props</span>: <span style="color:#66d9ef">P</span>) <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Component</span>&lt;<span style="color:#f92672">P</span>&gt;),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">props</span>: <span style="color:#66d9ef">P</span>,
</span></span><span style="display:flex;"><span>  ...<span style="color:#a6e22e">children</span><span style="color:#f92672">:</span> (<span style="color:#a6e22e">VNode</span>&lt;<span style="color:#f92672">any</span>&gt; <span style="color:#f92672">|</span> <span style="color:#a6e22e">VNode</span>&lt;<span style="color:#f92672">any</span>&gt;[])[] <span style="color:#f92672">|</span> (<span style="color:#66d9ef">string</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">number</span>)[]
</span></span><span style="display:flex;"><span>)<span style="color:#f92672">:</span> <span style="color:#a6e22e">VNode</span>&lt;<span style="color:#f92672">P</span>&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">normalizedProps</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    ...<span style="color:#a6e22e">props</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">children</span>: <span style="color:#66d9ef">isVNodeArray</span>(<span style="color:#a6e22e">children</span>) <span style="color:#f92672">?</span> <span style="color:#a6e22e">flatten</span>(<span style="color:#a6e22e">children</span>) <span style="color:#f92672">:</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">children</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#66d9ef">type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;string&#34;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// It is an html element
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> { <span style="color:#66d9ef">type</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">type</span>, <span style="color:#a6e22e">props</span>: <span style="color:#66d9ef">normalizedProps</span> };
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// It is a component
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> { <span style="color:#66d9ef">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#a6e22e">props</span>: <span style="color:#66d9ef">normalizedProps</span>, <span style="color:#66d9ef">class</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">type</span> };
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Don&rsquo;t be scared by the types, I have done my best to keep things simple, but you know some times it just gets ugly. The two functions <code>isVNodeArray</code> and <code>flatten</code> are used to normalize the props, <code>children</code> will be either a string or a flat array of VNodes. You can find them in the full code <a href="https://github.com/CharlyCst/microReact/blob/e1c1e08491a181aa034a117354addd706b05486b/src/%C2%B5React/core.ts#L74">here</a>.</p>
<p>Maybe you noticed that <code>type</code> expect either a string or a <code>Component</code> constructor, but we didn&rsquo;t define the Component class yet, let&rsquo;s do it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Component</span>&lt;<span style="color:#f92672">P</span> <span style="color:#960050;background-color:#1e0010">=</span> {}<span style="color:#960050;background-color:#1e0010">,</span> <span style="color:#a6e22e">S </span><span style="color:#f92672">=</span> {}&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">abstract</span> <span style="color:#a6e22e">state</span>: <span style="color:#66d9ef">S</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">props</span>: <span style="color:#66d9ef">P</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">_vNode</span>: <span style="color:#66d9ef">VNode</span>&lt;<span style="color:#f92672">P</span>&gt;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">constructor</span>(<span style="color:#a6e22e">props</span>: <span style="color:#66d9ef">P</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">props</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_vNode</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">props</span><span style="color:#f92672">:</span> { ...<span style="color:#a6e22e">props</span>, <span style="color:#a6e22e">children</span><span style="color:#f92672">:</span> [<span style="color:#a6e22e">emptyVNode</span>] }
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">abstract</span> <span style="color:#a6e22e">render</span>()<span style="color:#f92672">:</span> <span style="color:#a6e22e">VNode</span>&lt;<span style="color:#f92672">any</span>&gt;;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">componentDidMount() {</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setState</span>(<span style="color:#a6e22e">newState</span>: <span style="color:#66d9ef">Partial</span>&lt;<span style="color:#f92672">S</span>&gt;) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> { ...<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span>, ...<span style="color:#a6e22e">newState</span> };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newChild</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">render</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Do something with the new child
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It is now possible to define components by extending <code>Component</code> and defining a <code>render</code> method that returns a virtual node, that is some JSX as we are used to. We also defined <code>setState</code>, it updates the state and then call render, but for now we do nothing with the new child, we will come back to this method when talking about the <em>reconciliation algorithm</em>.</p>
<p>Now that we have our component and our JSX factory we can create a virtual DOM, let&rsquo;s try it out. First we set up our JSX transpiler (for instance Typescript here) to use our own factory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#75715e">// tsconfig.json
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;compilerOptions&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;jsx&#34;</span>: <span style="color:#e6db74">&#34;react&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;jsxFactory&#34;</span>: <span style="color:#e6db74">&#34;µReact.createElement&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And we can write some JSX:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-tsx" data-lang="tsx"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#960050;background-color:#1e0010">µ</span><span style="color:#a6e22e">React</span> <span style="color:#66d9ef">from</span> <span style="color:#e6db74">&#34;./µReact&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">List</span> <span style="color:#66d9ef">extends</span> <span style="color:#960050;background-color:#1e0010">µ</span><span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">Component</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">render() {</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">li</span>&gt;<span style="color:#a6e22e">Drink</span> <span style="color:#a6e22e">apple</span> <span style="color:#a6e22e">juice</span>&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">li</span>&gt;<span style="color:#a6e22e">Eat</span> <span style="color:#a6e22e">vegetables</span>&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span>{{ <span style="color:#a6e22e">backgroundColor</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;#f8f8f8&#34;</span> }}&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">List</span> /&gt;
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">app</span>);
</span></span></code></pre></div><p>As expected, this code prints:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;div&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">props</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">style</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">backgroundColor</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;#f8f8f8&#34;</span> },
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">children</span><span style="color:#f92672">:</span> [
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">class</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">List</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">props</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">children</span><span style="color:#f92672">:</span> [] }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Notice that the <code>List</code> virtual node has no children yet, because we don&rsquo;t call <code>render</code> when instantiating the component&rsquo;s virtual node.</p>
<p>Now that we can create a virtual DOM, it&rsquo;s time to actually render it on the screen.</p>
<h2 id="the-reconciliation-algorithm">The reconciliation algorithm</h2>
<p>The <em>reconciliation algorithm</em>, also called diffing algorithm, computes the differences between two virtual DOMs and deduce a set of operations to be applied to the old DOM to have it match the new one.</p>
<p>As explained in <a href="https://reactjs.org/docs/reconciliation.html">React&rsquo;s documentation</a>, computing the smallest set of operations to transform one tree into another takes O(n³) comparisons, which is impractical. We will take the same approach as React using a simple O(n) heuristic: two different types of nodes produce different sub-trees.</p>
<p>Let&rsquo;s create our <code>diff</code> function</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">diff</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">parentDom</span>: <span style="color:#66d9ef">HTMLElement</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">newNode</span>: <span style="color:#66d9ef">VNode</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">oldNode</span>: <span style="color:#66d9ef">VNode</span>
</span></span><span style="display:flex;"><span>)<span style="color:#f92672">:</span> <span style="color:#a6e22e">VNode</span> {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>The algorithm is the following: we take two virtual nodes, one corresponding to the current state and another matching the desired new state. Those two nodes are sub-trees of the virtual DOM, we iterate both of them simultaneously and for each node we have several cases:</p>
<ul>
<li>If both are HTML tags we can reuse the same (real) DOM element and update its properties. We will create a function <code>updateDomProperties</code> for that. Once updated, we diff children recursively.</li>
<li>If both nodes are components of the same class, for instance two <code>&lt;App/&gt;</code>, and both have the same props then the current DOM is already up to date and there is nothing to do. Otherwise, if props are different we need to <code>render</code> the component with the most recent props, and then we recursively diff both components children.</li>
<li>In the case that they does not share the same type, for instance a <code>&lt;div&gt;</code> and a <code>&lt;p&gt;</code> or an <code>&lt;App&gt;</code> and a <code>&lt;List&gt;</code>. Then accordingly to our heuristic we decide that these two nodes will produce different subtrees, thus we destroy the old DOM subtree and instantiate a fresh one. This is also the place to call the <code>componentDidMount</code> lifecycle method.</li>
</ul>
<p>The exact code is full of implementation details, I won&rsquo;t include it in this post but you can find it <a href="https://github.com/CharlyCst/microReact/blob/master/src/%C2%B5React/diff.ts">here</a> if you want to have a look.</p>
<p>But how exactly do we iterate on children? Well the simplest possible way: we have two lists, for instance the old children may be <code>[&lt;div&gt;, &lt;List&gt;]</code> and the new <code>[&lt;div&gt;, &lt;p&gt;, &lt;List&gt;]</code>, we first diff the two <code>&lt;div&gt;</code>, then we diff the <code>&lt;List&gt;</code> and the <code>&lt;p&gt;</code> and finally because we have child left in the new list bot not in the old we instantiate a fresh DOM node accordingly. If we had more old than new children we simply destroy any remaining nodes at the end.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#75715e">// Old DOM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>&lt;<span style="color:#f92672">App</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span>&gt;...&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">List</span> /&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">App</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// New DOM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>&lt;<span style="color:#f92672">App</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">div</span>&gt;...&lt;/<span style="color:#f92672">div</span>&gt;  {<span style="color:#75715e">/* Same &lt;div/&gt; as before                                  */</span>}
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">p</span>&gt;...&lt;/<span style="color:#f92672">p</span>&gt;      {<span style="color:#75715e">/* We destroyed &lt;List/&gt; and replaced it with a fresh &lt;p/&gt; */</span>}
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">List</span> /&gt;        {<span style="color:#75715e">/* A fresh &lt;List/&gt;                                        */</span>}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">App</span>&gt;
</span></span></code></pre></div><p>This has some practical implications: in the previous example it would have been more efficient to create a new <code>&lt;p&gt;</code> node and to insert it between the <code>&lt;div&gt;</code> and the <code>&lt;List&gt;</code>. In fact, it will even have a visual impact because the diff operation will destroy the <code>&lt;List&gt;</code> component to create a <code>&lt;p&gt;</code> instead and then create a fresh <code>&lt;List&gt;</code>: the state will be lost. There is a way to mitigate this in React using keys, I will discuss that a little later.</p>
<p>Remember the <code>Component.setState()</code> function we created earlier? It&rsquo;s time to complete it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#a6e22e">setState</span>(<span style="color:#a6e22e">newState</span>: <span style="color:#66d9ef">Partial</span>&lt;<span style="color:#f92672">S</span>&gt;) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> { ...<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span>, ...<span style="color:#a6e22e">newState</span> };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newChild</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">render</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">oldChild</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_vnode</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">children</span>[<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// We compute the difference with between the old and new child
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_vnode</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">children</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">diff</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">child</span>.<span style="color:#a6e22e">domElt</span>.<span style="color:#a6e22e">parentElement</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">newChild</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">oldChild</span>
</span></span><span style="display:flex;"><span>  );
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now when updating the state of a component the virtual DOM will automatically be updated.</p>
<p>At this point we can update the virtual DOM in response to events, let&rsquo;s move on and update the <em>real</em> DOM.</p>
<h2 id="manipulate-the-dom">Manipulate the DOM</h2>
<p>We are done with the reconciliation algorithm, but we still need two other functions to have it run: <code>updateDomProperties</code> and <code>instantiate</code>. The first is responsible for adding and removing attributes of a DOM element to have it match the new desired state. The second one is needed to create fresh DOM elements.</p>
<p>Let&rsquo;s starts with updating dom properties.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">updateDomProperties</span>&lt;<span style="color:#f92672">P</span><span style="color:#960050;background-color:#1e0010">,</span> <span style="color:#a6e22e">Q</span>&gt;(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">dom</span>: <span style="color:#66d9ef">HTMLElement</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">newNode</span>: <span style="color:#66d9ef">VNode</span>&lt;<span style="color:#f92672">P</span>&gt;,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">oldNode</span>: <span style="color:#66d9ef">VNode</span>&lt;<span style="color:#f92672">Q</span>&gt;
</span></span><span style="display:flex;"><span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newProps</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">newNode</span>.<span style="color:#a6e22e">props</span> <span style="color:#66d9ef">as</span> { [<span style="color:#a6e22e">attr</span>: <span style="color:#66d9ef">string</span>]<span style="color:#f92672">:</span> <span style="color:#66d9ef">any</span> };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">oldProps</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">oldNode</span>.<span style="color:#a6e22e">props</span> <span style="color:#66d9ef">as</span> { [<span style="color:#a6e22e">attr</span>: <span style="color:#66d9ef">string</span>]<span style="color:#f92672">:</span> <span style="color:#66d9ef">any</span> };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Remove no longer needed attributes and event listeners
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">attr</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">oldProps</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(<span style="color:#a6e22e">attr</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">newProps</span>) <span style="color:#f92672">||</span> <span style="color:#a6e22e">newProps</span>[<span style="color:#a6e22e">attr</span>] <span style="color:#f92672">!==</span> <span style="color:#a6e22e">oldProps</span>[<span style="color:#a6e22e">attr</span>]) {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">isEventListener</span>(<span style="color:#a6e22e">attr</span>)) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// For `onfoo` we need to remove the event `foo`
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">dom</span>.<span style="color:#a6e22e">removeEventListener</span>(<span style="color:#a6e22e">attr</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#ae81ff">2</span>), <span style="color:#a6e22e">oldProps</span>[<span style="color:#a6e22e">attr</span>]);
</span></span><span style="display:flex;"><span>      } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">dom</span>.<span style="color:#a6e22e">removeAttribute</span>(<span style="color:#a6e22e">attr</span>);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Add new attributes and event listeners
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">attr</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">newProps</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(<span style="color:#a6e22e">attr</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">oldProps</span>) <span style="color:#f92672">||</span> <span style="color:#a6e22e">newProps</span>[<span style="color:#a6e22e">attr</span>] <span style="color:#f92672">!==</span> <span style="color:#a6e22e">oldProps</span>[<span style="color:#a6e22e">attr</span>]) {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">isEventListener</span>(<span style="color:#a6e22e">attr</span>)) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">dom</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#a6e22e">attr</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#ae81ff">2</span>), <span style="color:#a6e22e">newProps</span>[<span style="color:#a6e22e">attr</span>]);
</span></span><span style="display:flex;"><span>      } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">newProps</span>[<span style="color:#a6e22e">attr</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;string&#34;</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">dom</span>.<span style="color:#a6e22e">setAttribute</span>(<span style="color:#a6e22e">attr</span>, <span style="color:#a6e22e">newProps</span>[<span style="color:#a6e22e">attr</span>]);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This function has been curated by removing some special cases for simplicity purposes, as always you can have a look at the full working code <a href="https://github.com/CharlyCst/microReact/blob/master/src/%C2%B5React/dom.ts">here</a>.</p>
<p>This function is rather simple, but we need to get it right: if we fail to remove an event listener, for instance a <code>onclick</code> attribute, but still add another one then both will be triggered when the user click the element.</p>
<p>We have to compose with the raw dom API here, and it does not treat all attributes as equal. For instance to set the <code>onchange</code> property (yes, <a href="https://www.w3schools.com/tags/ev_onchange.asp">it is not</a> <code>onChange</code>, you&rsquo;ve been fooled) we must first understand that it is an event listeners (because it starts with <code>on</code>) and then call <code>addEventListener</code> instead of <code>setAttribute</code> for most other properties.</p>
<p>And now let&rsquo;s write <code>instantiate</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">instantiate</span>&lt;<span style="color:#f92672">P</span>&gt;(<span style="color:#a6e22e">vNode</span>: <span style="color:#66d9ef">VNode</span>&lt;<span style="color:#f92672">P</span>&gt;)<span style="color:#f92672">:</span> <span style="color:#a6e22e">HTMLElement</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">vNode</span>.<span style="color:#66d9ef">class</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// This is a µReact Component
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">component</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">vNode</span>.<span style="color:#66d9ef">class</span>(<span style="color:#a6e22e">vNode</span>.<span style="color:#a6e22e">props</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">child</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">component</span>.<span style="color:#a6e22e">render</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">vNode</span>.<span style="color:#a6e22e">component</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">component</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">vNode</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">children</span> <span style="color:#f92672">=</span> [<span style="color:#a6e22e">child</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">component</span>.<span style="color:#a6e22e">_vNode</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">vNode</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">instantiate</span>(<span style="color:#a6e22e">child</span>);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// This is an HTML element
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">domElt</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#a6e22e">vNode</span>.<span style="color:#66d9ef">type</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">vNode</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">children</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;string&#34;</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">vNode</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">children</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">child</span> <span style="color:#f92672">=&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">domElt</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">instantiate</span>(<span style="color:#a6e22e">child</span>))
</span></span><span style="display:flex;"><span>      );
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">updateDomProperties</span>(<span style="color:#a6e22e">domElt</span>, <span style="color:#a6e22e">vNode</span>, <span style="color:#a6e22e">emptyVNode</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">vNode</span>.<span style="color:#a6e22e">domElt</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">domElt</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">domElt</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There are two cases:</p>
<ul>
<li>The virtual node is a component, thus it will not have any corresponding DOM element, but instead it holds a pointer to a fresh instance of its component class. It is also time to render the component for the first time, then we recursively instantiate its children.</li>
<li>The virtual node correspond to an HTML element, then we create a new DOM element, update its properties to match the virtual element&rsquo;s props and recursively instantiate its children.</li>
</ul>
<p>And we are done, we can create and maintain real DOM element. The very last thing we need is the ability to attach our DOM somewhere in the web page, that&rsquo;s the job of <code>render</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">render</span>(<span style="color:#a6e22e">vRoot</span>: <span style="color:#66d9ef">VNode</span>, <span style="color:#a6e22e">root</span>: <span style="color:#66d9ef">HTMLElement</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">root</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">diff</span>(<span style="color:#a6e22e">root</span>, <span style="color:#a6e22e">vRoot</span>, <span style="color:#a6e22e">emptyVNode</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s give it a try !</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">µ</span><span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">render</span>(<span style="color:#a6e22e">App</span>, document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;app&#34;</span>));
</span></span></code></pre></div><p>And here is the result, a real application rendered by µReact:</p>
<div>
  <iframe src="https://charlycst.github.io/microReact/" width="100%" height="500px"></iframe>
</div>
<p>(in case the iframe didn&rsquo;t render for whatever reason, <a href="https://charlycst.github.io/microReact/">Here</a> is the link to the app)</p>
<p>So satisfying, isn&rsquo;t it? We just created our very own web framework 🎉</p>
<h2 id="some-differences-with-react">Some differences with React</h2>
<p>Obviously there are some major differences between the real React and µReact. Beside the lack of major features such as functional components, hooks, asynchronous rendering or most lifecycle methods, I will discuss two differences that I believe are worth being aware of:</p>
<ul>
<li>Keying</li>
<li>React architecture</li>
</ul>
<h4 id="keying">Keying</h4>
<p>When discussing the diffing algorithm we saw the issue of inserting new elements at the beginning or in the middle of the list of children, which is very inefficient:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">li</span>&gt;<span style="color:#a6e22e">Python</span>&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">li</span>&gt;<span style="color:#a6e22e">Go</span>&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// After inserting a new element
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">li</span>&gt;<span style="color:#a6e22e">Rust</span>&lt;/<span style="color:#f92672">li</span>&gt;   {<span style="color:#75715e">/* old Python    */</span>}
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">li</span>&gt;<span style="color:#a6e22e">Python</span>&lt;/<span style="color:#f92672">li</span>&gt; {<span style="color:#75715e">/* old Go        */</span>}
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">li</span>&gt;<span style="color:#a6e22e">Go</span>&lt;/<span style="color:#f92672">li</span>&gt;     {<span style="color:#75715e">/* fresh element */</span>}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span></code></pre></div><p>Inefficiency is a thing, but there is worse: there is actually a bug in our Todo list application. If you have at least two items in the todo list, click on the first (it then becomes yellow, its state contains <code>clicked: true</code>) and remove it (by clicking the red dot), then the second item takes the first place but becomes yellow, what happened?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span>&lt;<span style="color:#f92672">List</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Item</span> <span style="color:#a6e22e">text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Drink apple juice&#34;</span>/&gt; {<span style="color:#75715e">/* clicked:true  */</span>}
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Item</span> <span style="color:#a6e22e">text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Eat vegetables&#34;</span>/&gt;    {<span style="color:#75715e">/* clicked:false */</span>}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">List</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// After deleting the first item
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>&lt;<span style="color:#f92672">List</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Item</span> <span style="color:#a6e22e">text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Eat vegetables&#34;</span>/&gt;    {<span style="color:#75715e">/* clicked:true  */</span>}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">List</span>&gt;
</span></span></code></pre></div><p>When iterating through children the algorithm will first compare <code>&lt;Item text=&quot;Drink apple juice&quot;/&gt;</code> and <code>&lt;Item text=&quot;Eat vegetables&quot;/&gt;</code> and think that you just changed the props, so it keeps the same component with the state <code>clicked:true</code>, update its props and trigger a re render.</p>
<p>A solution is to use <em>keys</em>, those are special props used by the diffing algorithm to decide if it should reuse a component or an HTML element.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span>&lt;<span style="color:#f92672">List</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Item</span> <span style="color:#a6e22e">key</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;aaa&#34;</span> <span style="color:#a6e22e">text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Drink apple juice&#34;</span>/&gt; {<span style="color:#75715e">/* clicked:true  */</span>}
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Item</span> <span style="color:#a6e22e">key</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;bbb&#34;</span> <span style="color:#a6e22e">text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Eat vegetables&#34;</span>/&gt;    {<span style="color:#75715e">/* clicked:false */</span>}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">List</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// After deleting the first item
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>&lt;<span style="color:#f92672">List</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">Item</span> <span style="color:#a6e22e">key</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;bbb&#34;</span> <span style="color:#a6e22e">text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Eat vegetables&#34;</span>/&gt;    {<span style="color:#75715e">/* clicked:false */</span>}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">List</span>&gt;
</span></span></code></pre></div><p>Now because we used key, the diffing algorithm knows that it should reuse the second component instead of updating props of the first.</p>
<p>This is why React print a warning if you try to render a list without keys, this kind of performance issue or unexpected behavior may happen.</p>
<h4 id="react-architecture">React architecture</h4>
<p>There are a lot of react-like frameworks out there, for instance <a href="https://preactjs.com/">Preact</a> and <a href="https://infernojs.org/">Inferno</a>, they each have their own focus such as bundle size or raw speed and implement more or less of React&rsquo;s features. There is, however, one big difference between most of these frameworks and React itself: the project architecture.</p>
<p>React is modular, and if the web is of course a privileged target it is not the only one: you may have heard of <a href="https://facebook.github.io/react-native/">React Native</a> for instance. We only considered the DOM when building µReact but the <em>real</em> React is composed of a base module simply called <a href="https://github.com/facebook/react/tree/master/packages/react">React</a>, also sometime referenced as the <em>reconciler</em>, and a <em>renderer</em>, <a href="https://github.com/facebook/react/tree/master/packages/react-dom">ReactDOM</a> for the web.</p>
<p>When building an application with ReactNative, you are actually using the same code for the reconciler as you would when building a web app. The renderer, however, is different.</p>
<p>This is where things get very interesting: if one day you need to build your own UI engine, maybe for a new IoT device, embedded inside a game or whatever other platform, as long as you can embed a JavaScript engine you can use React with a custom renderer. This is very powerful because first developers already know how to create UI using React, and second you benefit from all the present and future features of React as they are added.</p>
<p>If you are interested in learning more about this, <a href="https://www.youtube.com/watch?v=CGpMlWVcHok">here</a> is a talk on the subject.</p>
<h2 id="further-reading">Further reading</h2>
<p>I hope you enjoyed this article, if you want to take a closer look at the code or discuss my implementation don&rsquo;t hesitate to do so on <a href="https://github.com/CharlyCst/microReact">github</a>.</p>
<p>Here are some readings that I found interesting while building µReact:</p>
<ul>
<li>The source code of <a href="https://github.com/preactjs/preact">Preact</a>, it is much smaller than React itself and was very helpful to understand the inner working of React like frameworks.</li>
<li><a href="https://github.com/acdlite/react-fiber-architecture">React Fiber</a>, an insight of the new React algorithm used since v16.0.0.</li>
<li>React&rsquo;s official documentation, for instance <a href="https://reactjs.org/docs/reconciliation.html">reconciliation</a> or <a href="https://reactjs.org/docs/jsx-in-depth.html">JSX</a> and some of React&rsquo;s blog posts such as &ldquo;<a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html">React Components, Elements and Instances</a>&rdquo;.</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
